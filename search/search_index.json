{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Providing a comprehensive financial data API for seamless programmatic integration</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>The following documentation explains how to use the TEJ API to access the TEJ database.</p>"},{"location":"#api-authentication","title":"API Authentication","text":""},{"location":"#obtain-an-api-key","title":"Obtain an API key","text":"<p>You must first register an account with our company, then apply for an API key required for data access.</p> <p>Example</p> <pre><code>api_key=a8sb1jska2lz03hc2\n</code></pre>"},{"location":"#when-to-use-the-api-key","title":"When to use the API Key","text":"<p>You need to provide your API Key each time you access the data.</p> <p>Example</p> REST APIPython <pre><code>?api_key=\"YOURAPIKEY\"\n</code></pre> <pre><code>tejapi.ApiConfig.api_key = \"YOURAPIKEY\"\n</code></pre>"},{"location":"#free-and-paid-databases","title":"Free and Paid Databases","text":"<p>We provide both free and paid databases:</p> <ul> <li> <p>Trial Database</p> <ul> <li>Limited to tables provided within the trial database</li> <li>Up to 500 API calls per day</li> <li>Maximum of 10,000 records per call (additional data can be retrieved using pagination, total records capped at 50,000)</li> <li>Maximum of 50,000 records per day</li> </ul> </li> <li> <p>Paid Database</p> <ul> <li>Up to 2,000 API calls per day</li> <li>Maximum of 10,000 records per call (additional data can be retrieved using pagination, total records capped at 1,000,000)</li> <li>Maximum of 3,000,000 records per day</li> </ul> </li> </ul>"},{"location":"#api-for-various-programming-languages","title":"API for Various Programming Languages","text":"<p>Tejapi offers APIs for various programming languages. Please select from the following programming languages for detailed information.</p> <ul> <li> <p> REST API</p> <p>Instructions on accessing the REST API via HTTPS</p> <p> Reference</p> </li> <li> <p> Python API</p> <p>Instructions on using TEJ API with Python</p> <p> Reference</p> </li> <li> <p> R API</p> <p>Instructions on using TEJ API with R</p> <p> Reference</p> </li> <li> <p> .NET API</p> <p>Instructions on using TEJ API with .NET</p> <p> Reference</p> </li> </ul>"},{"location":"TWN/TWNABLOCK/","title":"[Block Trades on TWSE/TPEx] \u2013 Detailed Field Descriptions","text":""},{"location":"TWN/TWNABLOCK/#table-overview","title":"Table Overview","text":"<p>Abstract</p> <ul> <li>Table Name\uff1aTWN/ABLOCK</li> <li>Data Source: Taiwan Stock Exchange (TWSE) and Taipei Exchange (TPEx)  </li> <li>Reference Code Table: TWN/ANPRCSTD </li> <li>Code Column: coid</li> <li>Publication Date Column: mdate  </li> </ul>"},{"location":"TWN/TWNABLOCK/#key-indicators","title":"Key Indicators","text":"<ul> <li> <p>Time Range Last 5 Years</p> </li> <li> <p>Update Frequency Daily</p> </li> </ul>"},{"location":"TWN/TWNABLOCK/#field-descriptions","title":"Field Descriptions","text":"# Field Name Data Type Field Name Unit Description 1 <code>coid</code> <code>char(7)</code> Company Code \u2013 Security Code 2 <code>mdate</code> <code>datetime</code> Date \u2013 Date the information was published 3 <code>key3_e</code> <code>decimal(5,0)</code> Transaction Number(English) \u2013 Alternative or duplicate serial number 4 <code>tpnm_e</code> <code>char(30)</code> Category (English) \u2013 Block Trade Category. Single security requires purchase of 500 trading units at once; stock portfolio requires purchasing 5 types of stocks at once with a total amount of 15 million TWD. 5 <code>class_e</code> <code>char(20)</code> Transaction Type (English) \u2013 Trading method. Divided into matched trades, single trades, and aggregated values. 6 <code>term_e</code> <code>char(5)</code> Settlement Type (English) \u2013 Settlement method. Divided into T+1, T+2, and same-day settlement. 7 <code>auc_p</code> <code>decimal(7,2)</code> Transaction Price U Block Trade Transaction Price 8 <code>vol_d</code> <code>decimal(10,0)</code> Transaction Shares U Block Trade Transaction Shares 9 <code>amt_d</code> <code>decimal(12,0)</code> Transaction Amount U Block Trade Transaction Amount 10 <code>mkt</code> <code>char(3)</code> Market Type \u2013 TSE for listed, OTC for over-the-counter"},{"location":"TWN/TWNABLOCK/#api-request-examples","title":"API Request Examples","text":"<p>Example</p> RESTPythonRC#vb.net <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/ABLOCK.json?api_key=&lt;YOURAPIKEY&gt;\n</code></pre> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"\ndata = tejapi.get('TWN/ABLOCK')\n</code></pre> <pre><code>library(\"Tejapi\")\nTejapi.api_key(\"YOURAPIKEY\")\nyourdata&lt;- Tejapi('TWN/ABLOCK')\n</code></pre> <pre><code>using Tejapi;\nvar client = new TejClient(\"&lt;YOURAPIKEY&gt;\");\nvar result = await client.GetAsync(\"TWN/ABLOCK\");\n</code></pre> <pre><code>Imports Tejapi\nDim client As TejClient = New TejClient(\"&lt;YOURAPIKEY&gt;\")\nDim result As DataTable = Await client.GetAsync(\"TWN/ABLOCK\")\n</code></pre>"},{"location":"TWN/TWNABORROW/","title":"[Borrowing &amp; Lending Balances] \u2013 Detailed Field Descriptions","text":""},{"location":"TWN/TWNABORROW/#table-overview","title":"Table Overview","text":"<p>Abstract</p> <ul> <li>Table Name\uff1aTWN/ABORROW</li> <li>Data Source: Taiwan Stock Exchange Corporation - SBL Disclosures.</li> <li>Reference Code Table: TWN/ANPRCSTD</li> <li>Code Column: coid</li> <li>Publication Date Column: mdate</li> </ul>"},{"location":"TWN/TWNABORROW/#key-indicators","title":"Key Indicators","text":"<ul> <li> <p>Time Range Last 5 Years</p> </li> <li> <p>Update Frequency Daily</p> </li> </ul>"},{"location":"TWN/TWNABORROW/#field-descriptions","title":"Field Descriptions","text":"# Field Name Data Type Field Description Unit Field Descriptions 1 coid char(7) Company Code - Stock code 2 mdate datetime Date - Trade date 3 close_d decimal(12,4) Close Dollar Closing price 4 tborrow decimal(15,0) TOT_Borrowing Kshares Total Security Borrowing By Broker / Security Finance Firms 5 treturn decimal(15,0) TOT_Return Kshares Total Security Return by TWSE and by Brokers / Security Finance Firms 6 tsbl_bal decimal(15,0) TOT_SBL Balance Kshares Total SBL balance by TWSE and by Brokers / Security Finance Firms 7 tsbl_mv decimal(15,0) TOT_SBL MV Balance Dollar Total SBL Market Value balance by TWSE and by Brokers / Security Finance Firms 8 sborrow decimal(15,0) TSE_Borrowing Kshares TWSE total borrowing 9 sreturn decimal(15,0) TSE_Return Kshares TWSE total return 10 ssbl_bal decimal(15,0) TSE_SBL Balance Kshares TWSE SBL balance 11 ssbl_mv decimal(15,0) TSE_SBL MV Balance Dollar TWSE SBL Market Value balance 12 nborrow decimal(15,0) Brokers_Borrowing Kshares Brokers total borrowing 13 nreturn decimal(15,0) Brokers_Return Kshares Brokers total return 14 nsbl_bal decimal(15,0) Brokers_SBL Balance Kshares Brokers SBL balance 15 nsbl_mv decimal(15,0) Brokers_SBL MV Balance Dollar Brokers SBL Market Value balance 16 mkt char(5) Market - TSE = Listing company , OTC = Over-the-counter company"},{"location":"TWN/TWNABORROW/#api-request-examples","title":"API Request Examples","text":"<p>Examples</p> RESTPythonRC#vb.net <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/ABORROW.json?api_key=&lt;YOURAPIKEY&gt;\n</code></pre> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"\ndata = tejapi.get('TWN/ABORROW')\n</code></pre> <pre><code>library(\"Tejapi\")\nTejapi.api_key(\"YOURAPIKEY\")\nyourdata&lt;- Tejapi('TWN/ABORROW')\n</code></pre> <pre><code>using Tejapi;\nvar client = new TejClient(\"&lt;YOURAPIKEY&gt;\");\nvar result = await client.GetAsync(\"TWN/ABORROW\");\n</code></pre> <pre><code>Imports Tejapi\nDim client As TejClient = New TejClient(\"&lt;YOURAPIKEY&gt;\")\nDim result As DataTable = Await client.GetAsync(\"TWN/ABORROW\")\n</code></pre>"},{"location":"TWN/TWNAFESTM1/","title":"[Financial Data \u2013 Company Self-Reported Figures] Detailed Field Description","text":""},{"location":"TWN/TWNAFESTM1/#table-overview","title":"Table Overview","text":"<p>Abstract</p> <ul> <li>Table Name\uff1aTWN/AFESTM1</li> <li>Data Source: Market Observation Post System (MOPS), Taiwan, Investor Conference  </li> <li>Reference Code Table: TWN/ANPRCSTD </li> <li>Code Column: coid  </li> <li>Publication Date Column: mdate</li> </ul>"},{"location":"TWN/TWNAFESTM1/#key-indicators","title":"Key Indicators","text":"<ul> <li> <p>Time Range Last 5 Years</p> </li> <li> <p>Update Frequency Daily</p> </li> </ul>"},{"location":"TWN/TWNAFESTM1/#field-descriptions","title":"Field Descriptions","text":"# Field Name Data Type Field Description Unit Field Explanation 1 <code>coid</code> char(7) Company - Company code prepared by Exchange 2 <code>mdate</code> datetime Year/Month - Data year and month 3 <code>key3</code> char(5) Period Type - A = Accumulated, Q = Quarterly, TTM = Trailing Twelve Months 4 <code>no</code> char(3) Sequence Number - Prepare the serial number according to the date of preparation under the same year and month. 5 <code>sem</code> char(1) Quarter - Quarter 6 <code>merg</code> char(1) Consolidated (Y/N) - Y = Consolidated, N = Individual financials 7 <code>curr</code> char(4) Currency - Currency 8 <code>annd</code> datetime Announce date - Data announcement date 9 <code>fin_ind</code> char(10) Industry Type - F = Normal Industry; H = Bank; B = Insurance; S = Security; O = Finance Holding Bank 10 <code>ip12</code> decimal(16,2) Total_Operating_Revenue T Operating income settled by company itself. 11 <code>gm</code> decimal(16,2) Gross_Profit_Loss_from_Operations T Gross profit settled by company itself. 12 <code>opi</code> decimal(16,2) Net_Operating_Income_Loss T Net Operating Income (Loss) settled by company itself. 13 <code>isibt</code> decimal(16,2) Profit_Before_Tax T Profit before tax settled by company itself. 14 <code>isni</code> decimal(16,2) Net_Income_Loss T Net Income (Loss) settled by company itself. 15 <code>isnip</code> decimal(16,2) Net_Income_Attributable_to_Parent T Net income attributed to Parent settled by company itself. 16 <code>r306</code> decimal(16,2) Pre_Tax_Income_Per_Share NTD Pre-tax income per share settled by company itself. 17 <code>r316</code> decimal(16,2) Net_Income_Per_Share NTD Net income per share settled by company itself. 18 <code>eps</code> decimal(16,2) Basic_Earnings_Per_Share NTD Basic earnings per share settled by company itself, calculated from net income attributed to Parent. 19 <code>r105</code> decimal(16,2) Gross_Margin_Rate_% % Gross margin / Total operating income *100(%)If operating income &lt;= 0, do not count. 20 <code>r106</code> decimal(16,2) Operating_Income_Rate_% % Operating profit / operating income *100(%)If operating income &lt;=0, do not count. 21 <code>r107</code> decimal(16,2) Pre_Tax_Income_Rate_% % Pre-tax income / operating income *100(%)If operating income &lt;=0, do not count. 22 <code>r108</code> decimal(16,2) Net_Income_Rate_% % Net income / operating income *100(%)If operating income &lt;=0, do not count. 23 <code>r401</code> decimal(16,2) Sales_Growth_Rate % The growth margin between current period operating income and the counterpart in last year.(current period gross profit - gross profit same time last year) / ABS(operating income same time last year) *100(%) 24 <code>r402</code> decimal(16,2) Gross_Margin_Growth_Rate % The growth margin between current period gross profit and the counterpart in last year.(current period gross profit - gross profit same time last year) / ABS (operating profit same time last year) *100(%) 25 <code>r403</code> decimal(16,2) Operating_Income_Growth_Rate % The growth margin between current period operating income and the counterpart in last year.(current period operating income - operating income same time last period) / ABS (operating income same time last year) *100(%) 26 <code>r404</code> decimal(16,2) Pre_Tax_Income_Growth_Rate % The growth margin between current period total operating profit and the counterpart in last year.(current period total operating profit - total operating preofit same time last year) / ABS (total operating profit same time last year) *100(%) 27 <code>r405</code> decimal(16,2) Net_Income_Growth_Rate % The growth margin between current period net income and the counterpart in last year.(current period net income - net income same time last year) / ABS (net income same time last year) *100(%)"},{"location":"TWN/TWNAFESTM1/#api-request-examples","title":"API Request Examples","text":"<p>Examples</p> REST APIPythonRC#vb.net <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/AFESTM1.json?api_key=&lt;YOURAPIKEY&gt;\n</code></pre> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"\ndata = tejapi.get(\"TWN/AFESTM1\")\n</code></pre> <pre><code>library(\"Tejapi\")\nTejapi.api_key(\"YOURAPIKEY\")\nyourdata &lt;- Tejapi(\"TWN/AFESTM1\")\n</code></pre> <pre><code>using Tejapi;\nvar client = new TejClient(\"&lt;YOURAPIKEY&gt;\");\nvar result = await client.GetAsync(\"TWN/AFESTM1\");\n</code></pre> <pre><code>Imports Tejapi\nDim client As TejClient = New TejClient(\"&lt;YOURAPIKEY&gt;\")\nDim result As DataTable = Await client.GetAsync(\"TWN/AFESTM1\")\n</code></pre>"},{"location":"TWN/TWNAINVFQ1/","title":"[Financial Data_Certified by Accountants] Detailed Field Description","text":""},{"location":"TWN/TWNAINVFQ1/#table-overview","title":"Table Overview","text":"<p>Abstract</p> <ul> <li>Table Name\uff1aTWN/AINVFQ1</li> <li>Data Source: Market Observation Post System (MOPS), Taiwan</li> <li>Reference Code Table: TWN/ANPRCSTD</li> <li>Code Column: coid</li> <li>Publication Date Column: mdate</li> </ul>"},{"location":"TWN/TWNAINVFQ1/#key-indicators","title":"Key Indicators","text":"<ul> <li> <p>Time Range Last 5 Years</p> </li> <li> <p>Update Frequency Daily</p> </li> </ul>"},{"location":"TWN/TWNAINVFQ1/#field-descriptions","title":"Field Descriptions","text":"# Field Name Data Type Field Description Unit Remarks 1 coid char(7) Company - Company identifier 2 mdate datetime Year/Month - Year/Month 3 key3 char(5) Period Type - Period classification 4 no char(3) Serial Number - Serial number 5 sem char(1) Quarter - Quarter indicator 6 merg char(1) Consolidated (Y/N) - Consolidated indicator (Y/N) 7 curr char(4) Currency - Currency code 8 annd datetime Report Date - Report compilation date 9 fin_ind char(1) Industry Category - Industry classification 10 bp11 decimal(16,2) Cash and Cash Equivalents T Cash and cash equivalents 11 bp21 decimal(16,2) Accounts Receivable T Accounts receivable 12 bp22 decimal(16,2) Long-term Receivables T Long-term receivables 13 bp31 decimal(16,2) Inventory T Inventory 14 bp41 decimal(16,2) Accounts Payable T Accounts payable 15 bp51 decimal(16,2) Fixed Assets T Fixed assets 16 bp53 decimal(16,2) Intangible Assets T Intangible assets 17 bp61 decimal(16,2) Prepayments T Prepayments 18 bp62 decimal(16,2) Other Receivables T Other receivables 19 bp63 decimal(16,2) Advance Receipts - Current T Advance receipts - current 20 bp64 decimal(16,2) Other Payables T Other payables 21 bp65 decimal(16,2) Advance Receipts - Non-current T Advance receipts - non-current 22 bf11 decimal(16,2) Financial Borrowings - Current T Financial borrowings - current 23 bf12 decimal(16,2) Financial Borrowings - Non-current T Financial borrowings - non-current 24 bf21 decimal(16,2) Non-financial Borrowings - Current T Non-financial borrowings - current 25 bf22 decimal(16,2) Non-financial Borrowings - Non-current T Non-financial borrowings - non-current 26 bf41 decimal(16,2) Common Stock T Common stock 27 bf42 decimal(16,2) Capital Surplus T Capital surplus 28 bf43 decimal(16,2) Retained Earnings T Retained earnings 29 bf44 decimal(16,2) Preferred Stock T Preferred stock 30 bf45 decimal(16,2) Non-controlling Interest T Non-controlling interest 31 bf99 decimal(16,2) Other Equity T Other equity 32 bsca decimal(16,2) Total Current Assets T Total current assets 33 bsnca decimal(16,2) Total Non-current Assets T Total non-current assets 34 bsta decimal(16,2) Total Assets T Total assets 35 bscl decimal(16,2) Total Current Liabilities T Total current liabilities 36 bsncl decimal(16,2) Total Non-current Liabilities T Total non-current liabilities 37 bstl decimal(16,2) Total Liabilities T Total liabilities 38 bsse decimal(16,2) Total Shareholders' Equity T Total shareholders' equity 39 bslse decimal(16,2) Total Liabilities and Shareholders' Equity T Total liabilities and shareholders' equity 40 debt decimal(16,2) Short and Long-term Borrowings T Short and long-term borrowings 41 quick decimal(16,2) Quick Assets T Quick assets 42 ppe decimal(16,2) Property, Plant and Equipment T Property, plant and equipment 43 ar decimal(16,2) Short and Long-term Accounts Receivable T Short and long-term accounts receivable 44 ip12 decimal(16,2) Operating Revenue T Operating revenue 45 ip22 decimal(16,2) Operating Costs T Operating costs 46 ip31 decimal(16,2) Operating Expenses T Operating expenses 47 ip51 decimal(16,2) Income Tax Expense T Income tax expense 48 iv41 decimal(16,2) Interest Income T Interest income 49 if11 decimal(16,2) Interest Expense T Interest expense 50 isibt decimal(16,2) Profit Before Tax T Profit before tax 51 isni decimal(16,2) Net Income After Tax T Net income after tax 52 isnip decimal(16,2) Net Income Attributable to Parent Company T Net income attributable to parent company 53 eps decimal(16,2) Earnings Per Share T Earnings per share 54 ispsd decimal(16,2) Preferred Stock Dividend T Preferred stock dividend 55 gm decimal(16,2) Gross Profit T Gross profit 56 opi decimal(16,2) Operating Income T Operating income 57 nri decimal(16,2) Non-recurring Income T Non-recurring income 58 ri decimal(16,2) Recurring Income T Recurring income 59 nopi decimal(16,2) Non-operating Income and Expenses T Non-operating income and expenses 60 ebit decimal(16,2) Earnings Before Interest and Tax T Earnings before interest and tax 61 cip31 decimal(16,2) Depreciation and Amortization T Depreciation and amortization 62 cscfo decimal(16,2) Cash Flow from Operating Activities T Cash flow from operating activities 63 cscfi decimal(16,2) Cash Flow from Investing Activities T Cash flow from investing activities 64 cscff decimal(16,2) Cash Flow from Financing Activities T Cash flow from financing activities 65 person decimal(16,2) Number of Employees T Number of employees 66 shares decimal(16,2) Outstanding Shares at Period End T Outstanding shares at period end 67 wavg decimal(16,2) Weighted Average Shares T Weighted average shares 68 taxrate decimal(16,2) Tax Rate % Tax rate 69 r104 decimal(16,2) Recurring ROE % Recurring return on equity 70 r115 decimal(16,2) Recurring ROA % Recurring return on assets 71 r105 decimal(16,2) Gross Profit Margin % Gross profit margin 72 r106 decimal(16,2) Operating Profit Margin % Operating profit margin 73 r107 decimal(16,2) Pre-tax Profit Margin % Pre-tax profit margin 74 r108 decimal(16,2) Net Profit Margin % Net profit margin 75 r201 decimal(16,2) Operating Expense Ratio % Operating expense ratio 76 r112 decimal(16,2) Non-operating Income Ratio % Non-operating income ratio 77 r401 decimal(16,2) Revenue Growth Rate % Revenue growth rate 78 r402 decimal(16,2) Gross Profit Growth Rate % Gross profit growth rate 79 r403 decimal(16,2) Operating Income Growth Rate % Operating income growth rate 80 r404 decimal(16,2) Pre-tax Profit Growth Rate % Pre-tax profit growth rate 81 r405 decimal(16,2) Net Income Growth Rate % Net income growth rate 82 r408 decimal(16,2) Asset Growth Rate % Asset growth rate 83 r409 decimal(16,2) Equity Growth Rate % Equity growth rate 84 r410 decimal(16,2) Fixed Asset Growth Rate % Fixed asset growth rate 85 r502 decimal(16,2) Quick Ratio % Quick ratio 86 r501 decimal(16,2) Current Ratio % Current ratio 87 r205 decimal(16,2) Cash Flow Ratio % Cash flow ratio 88 r505 decimal(16,2) Debt Ratio % Debt ratio 89 r517 decimal(16,2) Interest Expense Ratio % Interest expense ratio 90 r512 decimal(16,2) Interest Coverage Ratio % Interest coverage ratio 91 r509 decimal(16,2) Borrowing Dependency % Borrowing dependency 92 r608 decimal(16,2) Accounts Receivable Turnover % Accounts receivable turnover 93 r616 decimal(16,2) Accounts Payable Turnover % Accounts payable turnover 94 r610 decimal(16,2) Inventory Turnover % Inventory turnover 95 r607 decimal(16,2) Total Asset Turnover % Total asset turnover 96 r613 decimal(16,2) Equity Turnover % Equity turnover 97 r612 decimal(16,2) Fixed Asset Turnover % Fixed asset turnover 98 r609 decimal(16,2) Days Sales Outstanding % Days sales outstanding 99 r614 decimal(16,2) Days Payable Outstanding % Days payable outstanding 100 r611 decimal(16,2) Days Inventory Outstanding % Days inventory outstanding 101 r307 decimal(16,2) Book Value Per Share Currency Book value per share 102 r304 decimal(16,2) Operating Revenue Per Share T Operating revenue per share 103 r305 decimal(16,2) Operating Income Per Share T Operating income per share 104 r306 decimal(16,2) Pre-tax Profit Per Share T Pre-tax profit per share 105 r316 decimal(16,2) Net Income Per Share T Net income per share 106 r834 decimal(16,2) Revenue Per Employee T Revenue per employee"},{"location":"TWN/TWNAINVFQ1/#api-request-examples","title":"API Request Examples","text":"<p>Example</p> RESTPythonRC#vb.net <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/AINVFQ1.json?api_key=&lt;YOURAPIKEY&gt;\n</code></pre> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"\ndata = tejapi.get('TWN/AINVFQ1')\n</code></pre> <pre><code>library(\"Tejapi\")\nTejapi.api_key(\"YOURAPIKEY\")\nyourdata&lt;- Tejapi('TWN/AINVFQ1')\n</code></pre> <pre><code>using Tejapi;\nvar client = new TejClient(\"&lt;YOURAPIKEY&gt;\");\nvar result = await client.GetAsync(\"TWN/AINVFQ1\");\n</code></pre> <pre><code>Imports Tejapi\nDim client As TejClient = New TejClient(\"&lt;YOURAPIKEY&gt;\")\nDim result As DataTable = Await client.GetAsync(\"TWN/AINVFQ1\")\n</code></pre>"},{"location":"TWN/TWNAMTOP1/","title":"[Major Broker Trading Details - By Stock] Detailed Field Description","text":""},{"location":"TWN/TWNAMTOP1/#table-overview","title":"Table Overview","text":"<p>Abstract</p> <ul> <li>Table Name\uff1aTWN/AMTOP1</li> <li>Data Source: Data covers listed securities and indices (TSE and OTC)</li> <li>Reference Code Table: TWN/ANPRCSTD</li> <li>Code Column: coid</li> <li>Publication Date Column: mdate</li> </ul>"},{"location":"TWN/TWNAMTOP1/#key-indicators","title":"Key Indicators","text":"<ul> <li> <p>Time Range Last 5 Years</p> </li> <li> <p>Update Frequency Daily</p> </li> </ul>"},{"location":"TWN/TWNAMTOP1/#field-descriptions","title":"Field Descriptions","text":"# Field Name Data Type Field description Unit Field Explanation 1 <code>coid</code> <code>char(7)</code> Security Name - Security Name 2 <code>mdate</code> <code>datetime</code> Date - Date 3 <code>key3</code> <code>char(23)</code> Security Code - Security Code 4 <code>key3_e</code> <code>char(37)</code> Security Code (English) - Security Code (English) 5 <code>buy</code> <code>decimal(9,0)</code> Buy Volume (Shares) - Buy Volume (Shares) 6 <code>sell</code> <code>decimal(9,0)</code> Sell Volume (Shares) - Sell Volume (Shares) 7 <code>qfii_ex</code> <code>decimal(9,0)</code> Net Buy (Sell) - Net Buy (Sell) 8 <code>buy_m</code> <code>decimal(9,0)</code> Buy Amount - Buy Amount 9 <code>sell_m</code> <code>decimal(9,0)</code> Sell Amount - Sell Amount 10 <code>bs_m</code> <code>decimal(9,0)</code> Net Buy (Sell) Amount - Net Buy (Sell) Amount 11 <code>total</code> <code>decimal(9,0)</code> Transaction Amount - Transaction Amount 12 <code>fld010</code> <code>decimal(7,2)</code> Average Buy Price (NTD) - Average Buy Price (NTD) 13 <code>fld011</code> <code>decimal(7,2)</code> Average Sell Price (NTD) - Average Sell Price (NTD) 14 <code>tout_w</code> <code>decimal(13,2)</code> 1-Week Net Buy (Sell) Volume (Lots) - 1-Week Net Buy (Sell) Volume (Lots) 15 <code>tmout_w</code> <code>decimal(13,2)</code> 1-Week Net Buy (Sell) Amount - 1-Week Net Buy (Sell) Amount 16 <code>tout_m</code> <code>decimal(13,2)</code> 1-Month Net Buy (Sell) Volume (Lots) - 1-Month Net Buy (Sell) Volume (Lots) 17 <code>tmout_m</code> <code>decimal(13,2)</code> 1-Month Net Buy (Sell) Amount - 1-Month Net Buy (Sell) Amount 18 <code>tout_q</code> <code>decimal(13,2)</code> 1-Quarter Net Buy (Sell) Volume (Lots) - 1-Quarter Net Buy (Sell) Volume (Lots) 19 <code>tmout_q</code> <code>decimal(13,2)</code> 1-Quarter Net Buy (Sell) Amount - 1-Quarter Net Buy (Sell) Amount 20 <code>tout_y</code> <code>decimal(13,2)</code> 1-Year Net Buy (Sell) Volume (Lots) - 1-Year Net Buy (Sell) Volume (Lots) 21 <code>tmout_y</code> <code>decimal(13,2)</code> 1-Year Net Buy (Sell) Amount - 1-Year Net Buy (Sell) Amount 22 <code>tout_wb</code> <code>decimal(13,2)</code> Current Week Net Buy (Sell) Volume (Lots) - Current Week Net Buy (Sell) Volume (Lots) 23 <code>tmout_wb</code> <code>decimal(13,2)</code> Current Week Net Buy (Sell) Amount - Current Week Net Buy (Sell) Amount 24 <code>tout_mb</code> <code>decimal(13,2)</code> Current Month Net Buy (Sell) Volume (Lots) - Current Month Net Buy (Sell) Volume (Lots) 25 <code>tmout_mb</code> <code>decimal(13,2)</code> Current Month Net Buy (Sell) Amount - Current Month Net Buy (Sell) Amount 26 <code>tout_qb</code> <code>decimal(13,2)</code> Current Quarter Net Buy (Sell) Volume (Lots) - Current Quarter Net Buy (Sell) Volume (Lots) 27 <code>tmout_qb</code> <code>decimal(13,2)</code> Current Year Net Buy (Sell) Volume (Lots) - Current Year Net Buy (Sell) Volume (Lots) 28 <code>tout_yb</code> <code>decimal(13,2)</code> Current Year Net Buy (Sell) Amount - Current Year Net Buy (Sell) Amount"},{"location":"TWN/TWNAMTOP1/#api-request-examples","title":"API Request Examples","text":"<p>Example</p> RESTPythonRC#vb.net <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/AMTOP1.json?api_key=&lt;YOURAPIKEY&gt;\n</code></pre> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"\ndata = tejapi.get('TWN/AMTOP1')\n</code></pre> <pre><code>library(\"Tejapi\")\nTejapi.api_key(\"YOURAPIKEY\")\nyourdata&lt;- Tejapi('TWN/AMTOP1')\n</code></pre> <pre><code>using Tejapi;\nvar client = new TejClient(\"&lt;YOURAPIKEY&gt;\");\nvar result = await client.GetAsync(\"TWN/AMTOP1\");\n</code></pre> <pre><code>Imports Tejapi\nDim client As TejClient = New TejClient(\"&lt;YOURAPIKEY&gt;\")\nDim result As DataTable = Await client.GetAsync(\"TWN/AMTOP1\")\n</code></pre>"},{"location":"TWN/TWNANPRCSTD/","title":"[Company Attribute] \u2013 Detailed Field Descriptions","text":""},{"location":"TWN/TWNANPRCSTD/#table-overview","title":"Table Overview","text":"<p>Abstract</p> <ul> <li>Table Name\uff1aTWN/ANPRCSTD</li> <li>Data Range: Taiwan Market </li> <li>Data Period: Current</li> <li>Code Column: coid</li> <li>Publication Date Column: mdate</li> </ul>"},{"location":"TWN/TWNANPRCSTD/#key-indicators","title":"Key Indicators","text":"<ul> <li> <p>Time Range Last 5 Years</p> </li> <li> <p>Update Frequency Daily</p> </li> </ul>"},{"location":"TWN/TWNANPRCSTD/#field-descriptions","title":"Field Descriptions","text":"# Field Name Data Type Field Descriptions 1 coid char(7) Company Code 2 mdate datetime Status 3 stk_name varchar(20) Chinese Symbol 4 stk_f_chi varchar(50) Chinese Company Name 5 enm varchar(40) English Symbol 6 stk_eng varchar(30) English Company Name 7 ind_ban varchar(8) Ban Code 8 mkt varchar(10) Market 9 stype varchar(10) English Security Type 10 stypenm varchar(20) Chinese Security Type 11 list_date datetime Date of Listing 12 delis_date datetime Date of Delisting 13 tejind varchar(5) TEJ Industry Code 14 tejindnm varchar(20) TEJ Industry Name 15 tseind varchar(3) TWSE/OTC Industry Code 16 tseindnm varchar(20) TWSE/OTC Industry Name"},{"location":"TWN/TWNANPRCSTD/#api-request-examples","title":"API Request Examples","text":"<p>Examples</p> RESTPythonRC#vb.net <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/ANPRCSTD.json?api_key=&lt;YOURAPIKEY&gt;\n</code></pre> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"\ndata = tejapi.get('TWN/ANPRCSTD')\n</code></pre> <pre><code>library(\"Tejapi\")\nTejapi.api_key(\"YOURAPIKEY\")\nyourdata&lt;- Tejapi('TWN/ANPRCSTD')\n</code></pre> <pre><code>using Tejapi;\nvar client = new TejClient(\"&lt;YOURAPIKEY&gt;\");\nvar result = await client.GetAsync(\"TWN/ANPRCSTD\");\n</code></pre> <pre><code>Imports Tejapi\nDim client As TejClient = New TejClient(\"&lt;YOURAPIKEY&gt;\")\nDim result As DataTable = Await client.GetAsync(\"TWN/ANPRCSTD\")\n</code></pre>"},{"location":"TWN/TWNAPISALE1/","title":"[Operating Data \u2013 Monthly Revenue (by Version)] \u2013 Detailed Field Descriptions","text":""},{"location":"TWN/TWNAPISALE1/#table-overview","title":"Table Overview","text":"<p>Abstract</p> <ul> <li>Table Name\uff1aTWN/APISALE1</li> <li>Data Source: Market Observation Post System (MOPS), Taiwan, Investor Conference  </li> <li>Reference Code Table: TWN/ANPRCSTD</li> <li>Code Column: coid</li> <li>Publication Date Column: mdate</li> </ul>"},{"location":"TWN/TWNAPISALE1/#key-indicators","title":"Key Indicators","text":"<ul> <li> <p>Time Range Last 5 Years</p> </li> <li> <p>Update Frequency Daily</p> </li> </ul>"},{"location":"TWN/TWNAPISALE1/#field-descriptions","title":"Field Descriptions","text":"# Field Name Data Type Field Description Unit Field Explanation 1 <code>coid</code> char(7) CO_ID - Company code given by the exchange 2 <code>mdate</code> datetime YYMM - Year and month of data cutoff 3 <code>key3</code> decimal(3,0) OD - Serial No. 4 <code>annd_s</code> datetime Announcement Date-SALE - Revenue announcement date: The exchange requires companies above the public offering level to announance their self-assessed revenue by the 10<sup>th</sup> day of each month. 5 <code>annd_time</code> nchar(8) Announcement Time - Revenue announcement timing 6 <code>d0001</code> decimal(14,0) Sale-Monthly Thousand dollars The company's self-assessed monthly revenue 7 <code>d0002</code> decimal(14,0) Sale-Monthly,Last Year Thousand dollars The company has disclosed the self-assessed monthly revenue for the same period last year for users' comparison. 8 <code>d0003</code> decimal(13,2) YoY%-Monthly Sale % Monthly revenue growth rate for the same period last year (%)Since the company provides information on the same period the previous year when disclosing the current month's revenue for comparison, the calculation is based on the information on the same period last year announced by the company on the same day.<sup>1</sup> 9 <code>d0004</code> decimal(13,2) MoM%-Monthly Sale % This is the change in monthly revenue between the current month and the previous month.Since the company may revise its revenue from time to time, the prior month's revenue herein refers to the latest prior month's revenue released before the date of this announcement. <sup>2</sup> 10 <code>d0005</code> decimal(14,0) Sale-Accumulated Thousand dollars Accumulated self-assessed revenue for the year 11 <code>d0006</code> decimal(14,0) Sale-Accu.,L.Y. Thousand dollars The company disclosed its cumulative net sales for the same period last year for comparison purposes. 12 <code>d0007</code> decimal(13,2) YoY%-Acc. Sales % Accumulated revenue growth rate for the same period last year (%) Since the company provides information about the same period the previous year when disclosing the current month's revenue for comparison, the calculation is based on the information of the same period last year announced by the company on the same day. <sup>3</sup> 13 <code>a4maxh</code> decimal(14,0) Highest Monthly Sales Thousand All-time high monthly revenue 14 <code>a4maxd</code> datetime Highest Monthly Sales YM - Year/month of all-time high revenue 15 <code>a4max_pct</code> decimal(13,2) (Month Sales/H.Month Sales-1)% % ((This month\u2019s revenue \u00f7 Historical max revenue) \u00d7 100)-1 16 <code>a4minh</code> decimal(14,0) Lowest Monthly Sales Thousand All-time low monthly revenue 17 <code>a4mind</code> datetime Lowest Monthly Sales YM - Year/month of all-time low revenue 18 <code>a4min_pct</code> decimal(13,2) (Month Sales/L.Month Sales-1)% % ((This month\u2019s revenue \u00f7 Historical min revenue) \u00d7 100)-1 19 <code>a4hfg</code> nchar(1) Highest/Lowest(All Time) - Whether it\u2019s a historical high/low (H/L) 20 <code>a4yfg</code> nchar(1) Highest/Lowest(Last 12 M) - Whether it\u2019s a 1-year high/low  (H/L) 21 <code>a4mfg</code> nchar(1) Highest/Lowest(Month) - Whether it\u2019s a high/low for same month   (H/L) 22 <code>sl_month</code> decimal(6,0) Hit New High / Low in N Months (Month) - How many months hit a new high/low 23 <code>t8107</code> decimal(14,0) Sale-Accu.,Last 12M Thousand dollars The monthly revenue for the past 12 months is projected from the beginning of the month.Since the company may revise its revenue from time to time, the calculation is based on the latest revenue of the last 12 months released before the date of this announcement. 24 <code>t8111</code> decimal(14,0) Sale-Accu.,L.Y.12M % The sum of monthly revenue for the last 12 months is calculated from the same month of the previous year.Since the company may occasionally revise revenue, the calculation is based on the latest revenue for the same month last year for the 12 months before this announcement. 25 <code>r18</code> decimal(13,2) YoY%-Acc. Sales L12M % Growth rate of revenue for the last 12 months compared to the same period of last year. <sup>4</sup> 26 <code>t8133</code> decimal(14,0) Sale-Accu.,Last 3M Thousand dollars Monthly revenues for the past three months are summarized from the beginning of the month they were generated.Since the company may revise its revenue from time to time, the calculation is based on the latest revenue of the last three months before the date of this announcement. 27 <code>t8134</code> decimal(14,0) Sale-Accu.,L.Y. 3M Thousand dollars The sum of last year's monthly revenue over the previous three months is calculated from the same month of last year.Since the company may revise revenue from time to time, the calculation is based on the latest monthly revenue for the same period last year, released before the date of this announcement. 28 <code>r25</code> decimal(13,2) YoY%-Acc. Sales L 3M % (Accumulated revenue for the last three months - Accumulated revenue for the last three months of the same period last year) / ABS (Accumulated revenue for the last three months of the same period last year) *100(%)      <sup>5</sup> 29 <code>r26</code> decimal(13,2) MoM%-Acc. Sales L 3M % (Cumulative revenue in the past 3 months - Cumulative revenue in the past 3 months last month) /ABS (Cumulative revenue in the past 3 months last month) *100(%)Last month's cumulative revenue for the last three months is calculated based on the latest last month's cumulative revenue for the previous three months before this announcement. <sup>6</sup> 30 <code>r26a</code> decimal(13,2) QoQ%-Acc. Sales L 3M % The rate of change in cumulative revenue for the last three months compared to the cumulative revenue for the last three months before the date of this announcement is used to calculate the rate of change for a single moving quarter.Since the company may revise its revenue from time to time, the cumulative revenue for the last three months before this announcement is based on the latest cumulative revenue for the last three months before the announcement date. <sup>7</sup> 31 <code>d0025</code> decimal(14,0) Outstanding Shares Thousand Shares The number of common shares outstanding at the end of the year. 32 <code>d0026</code> decimal(11,2) Sale/Per Month Dollars Monthly Revenue / Shares Outstanding <sup>8</sup> 33 <code>d0027</code> decimal(11,2) Sale/Share-Accu. Dollars Cumulative Revenue / Outstanding Shares    <sup>9</sup> 34 <code>r19</code> decimal(11,2) Sale/Share-Accu.L12M Dollars Cumulative Revenue  for the Last 12 Months / Outstanding Shares    <sup>10</sup> 35 <code>r27</code> decimal(11,2) Sale/Share-Accu.L 3M Dollars Cumulative Revenue for the Last 3 Months / Outstanding Shares  <sup>11</sup> 36 <code>diff_rmk</code> nchar(300) Remark - This information has been provided since 2013/01 and is mainly derived from explaining the reasons for the change in revenue from the Market Observation Post System [Monthly Revenue]."},{"location":"TWN/TWNAPISALE1/#api-request-examples","title":"API Request Examples","text":"<p>Examples</p> RESTPythonRC#vb.net <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/APISALE1.json?api_key=&lt;YOURAPIKEY&gt;\n</code></pre> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"\ndata = tejapi.get('TWN/APISALE1')\n</code></pre> <pre><code>library(\"Tejapi\")\nTejapi.api_key(\"YOURAPIKEY\")\nyourdata&lt;- Tejapi('TWN/APISALE1')\n</code></pre> <pre><code>using Tejapi;\nvar client = new TejClient(\"&lt;YOURAPIKEY&gt;\");\nvar result = await client.GetAsync(\"TWN/APISALE1\");\n</code></pre> <pre><code>Imports Tejapi\nDim client As TejClient = New TejClient(\"&lt;YOURAPIKEY&gt;\")\nDim result As DataTable = Await client.GetAsync(\"TWN/APISALE1\")\n</code></pre> <ol> <li> <p>([Sale-Monthly] - [Sale-Monthly,Last Year]) / ABS[Sale-Monthly,Last Year] *100(%)\u00a0\u21a9</p> </li> <li> <p>([Sale-Monthly] - [Latest prior month's Sale-Monthly]) / ABS[Latest prior month's Sale-Monthly] *100(%)\u00a0\u21a9</p> </li> <li> <p>([Sale-Accumulated] - [Sale-Accu.,L.Y.]) / ABS[Sale-Accu.,L.Y.] *100(%)\u00a0\u21a9</p> </li> <li> <p>([Sale-Accu.,Last 12M] - [Sale-Accu.,L.Y.12M]) / ABS[Sale-Accu.,L.Y.12M] *100(%)\u00a0\u21a9</p> </li> <li> <p>([Sale-Accu.,Last 3M] - [Sale-Accu.,L.Y.3M]) / ABS[Sale-Accu.,L.Y.3M] *100(%)\u00a0\u21a9</p> </li> <li> <p>([Sale-Accu.,Last 3M] - [Last month's Sale-Accu.,Last 3M]) / ABS[Last month's Sale-Accu.,Last 3M] *100(%)\u00a0\u21a9</p> </li> <li> <p>([Sale-Accu.,Last 3M] - [Last 3 months ago Sale-Accu.,Last 3M]) / ABS[Last 3 months ago Sale-Accu.,Last 3M] *100(%)\u00a0\u21a9</p> </li> <li> <p>[Sale-Monthly] / [Outstanding Shares]\u00a0\u21a9</p> </li> <li> <p>[Sale-Accumulated] / [Outstanding Shares]\u00a0\u21a9</p> </li> <li> <p>[Sale-Accu.,Last 12M] / [Outstanding Shares]\u00a0\u21a9</p> </li> <li> <p>[Sale-Accu.,Last 3M] / [Outstanding Shares]\u00a0\u21a9</p> </li> </ol>"},{"location":"TWN/TWNASBL/","title":"[SBL information-Returned transaction inquiry] \u2013 Detailed Field Descriptions","text":""},{"location":"TWN/TWNASBL/#table-overview","title":"Table Overview","text":"<p>Abstract</p> <ul> <li>Table Name\uff1aTWN/ASBL</li> <li>Data Source: Taiwan Stock Exchange (TWSE) and Taipei Exchange (TPEx)</li> <li>Reference Code Table: TWN/ANPRCST</li> <li>Code Column: coid</li> <li>Publication Date Column: mdate</li> </ul>"},{"location":"TWN/TWNASBL/#key-indicators","title":"Key Indicators","text":"<ul> <li> <p>Time Range Last 5 Years</p> </li> <li> <p>Update Frequency Daily</p> </li> </ul>"},{"location":"TWN/TWNASBL/#field-descriptions","title":"Field Descriptions","text":"# Field Name Data Type Field Description Unit Field Descriptions 1 coid char(7) Company_ID - Security code 2 mdate datetime Date - Trading data 3 key3 decimal(4,0) OD - To distinguish the same day information 4 type_e varchar(20) Transaction type<sup>1</sup> - Three different transaction method 5 vol decimal(10,0) Volume traded KShares SBL Trading Volume 6 cost decimal(7,2) Fee rate % SBL Fee rate 7 close_d decimal(12,4) Close Price Dollar Closing price of the day 8 edate datetime Date returned - Date returned 9 day decimal(4,0) Borrowed days Day Number of days borrowed"},{"location":"TWN/TWNASBL/#api-request-examples","title":"API Request Examples","text":"<p>Examples</p> RESTPythonRC#vb.net <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/ASBL.json?api_key=&lt;YOURAPIKEY&gt;\n</code></pre> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"\ndata = tejapi.get('TWN/ASBL')\n</code></pre> <pre><code>library(\"Tejapi\")\nTejapi.api_key(\"YOURAPIKEY\")\nyourdata&lt;- Tejapi('TWN/ASBL')\n</code></pre> <pre><code>using Tejapi;\nvar client = new TejClient(\"&lt;YOURAPIKEY&gt;\");\nvar result = await client.GetAsync(\"TWN/ASBL\");\n</code></pre> <pre><code>Imports Tejapi\nDim client As TejClient = New TejClient(\"&lt;YOURAPIKEY&gt;\")\nDim result As DataTable = Await client.GetAsync(\"TWN/ASBL\")\n</code></pre> <ol> <li> <p>Transaction type:<code>C</code> : Competitive auction transaction <code>F</code> : Fixed-rate transaction <code>N</code> : Negotiated transaction\u00a0\u21a9</p> </li> </ol>"},{"location":"TWN/TWNATINVS/","title":"[Repurchase of Treasury Shares] \u2013 Detailed Field Descriptions","text":""},{"location":"TWN/TWNATINVS/#table-overview","title":"Table Overview","text":"<p>Abstract</p> <ul> <li>Table Name\uff1aTWN/ATINVS</li> <li>Data Source: Market Observation Post System (MOPS), Taiwan</li> <li>Reference Code Table: TWN/ANPRCSTD</li> <li>Code Column: coid</li> <li>Publication Date Column: mdate</li> </ul>"},{"location":"TWN/TWNATINVS/#key-indicators","title":"Key Indicators","text":"<ul> <li> <p>Time Range Last 5 Years</p> </li> <li> <p>Update Frequency Daily</p> </li> </ul>"},{"location":"TWN/TWNATINVS/#field-descriptions","title":"Field Descriptions","text":"# Field Name Data Type Field Description Unit Description 1 <code>coid</code> <code>char(7)</code> Co_ID \u2013 Company Code 2 <code>mdate</code> <code>datetime</code> Date of Dir. Meeting \u2013 Date of Board Meeting 3 <code>key3</code> <code>decimal(3,0)</code> No. \u2013 Serial Number 4 <code>ts_od</code> <code>decimal(6,1)</code> Buying Times \u2013 Number of Buybacks Resolved by Board, used in non-regular treasury stock announcements 5 <code>usageenm_e</code> <code>char(30)</code> Usage \u2013 Purpose of Buyback: e.g., Employee Transfer, Merger, Cancellation, Equity Conversion, etc. 6 <code>tzdate1</code> <code>datetime</code> Announced Beginning Date \u2013 Start Date of Scheduled Buyback Period 7 <code>tzdate2</code> <code>datetime</code> Announced Ending Date \u2013 End Date of Scheduled Buyback Period 8 <code>uprcl</code> <code>decimal(9,2)</code> Lower Unit Price Yuan Lower Limit of Scheduled Buyback Price 9 <code>uprcu</code> <code>decimal(9,2)</code> Upper Unit Price Yuan Upper Limit of Scheduled Buyback Price 10 <code>prc_ul</code> <code>decimal(10,0)</code> Buyable Upper Amount Yuan Retained Earnings + Realized Capital Reserve 11 <code>zac_pct</code> <code>decimal(6,2)</code> Holding Shares % in Meeting Day % Treasury Shares Held Before Reporting / Shares Outstanding 12 <code>ca_pct</code> <code>decimal(6,2)</code> Amount/Current Asset % Upper Limit Price \u00d7 Scheduled Buyback Shares / Current Assets 13 <code>zshare</code> <code>decimal(9,0)</code> Announced Buying Volume thousand Estimated Number of Shares to Buy Back 14 <code>share9</code> <code>decimal(9,0)</code> Actual Buying Volume thousand Actual Number of Shares Bought Back 15 <code>shrg_pct</code> <code>decimal(6,2)</code> Executed % % Actual / Estimated Buyback Shares 16 <code>rmk</code> <code>char(40)</code> Un-executed Note \u2013 Reason for Incomplete Execution 17 <code>tlprc</code> <code>decimal(10,0)</code> Amount of Buying Yuan Actual Total Buyback Amount 18 <code>uprc</code> <code>decimal(9,2)</code> Average Unit Price Yuan Total Buyback Amount / Number of Shares Bought 19 <code>acshr</code> <code>decimal(9,0)</code> Cumulative Shares thousand Accumulated Holdings of Treasury Shares (after completion of buyback) 20 <code>acpct</code> <code>decimal(6,2)</code> Shares/Book Value % Accumulated Holdings / Shares Outstanding 21 <code>xdedcd</code> <code>datetime</code> Last Resale Date \u2013 Last Date of Treasury Shares Transfer or Cancellation 22 <code>capdec</code> <code>decimal(9,0)</code> Cancellation Volume thousand Volume of Buyback for Cancellation (must be canceled within 6 months) 23 <code>tsbal</code> <code>decimal(9,0)</code> Un-Resale Volume thousand Remaining Shares Not Written Off 24 <code>trsfer</code> <code>decimal(9,0)</code> Vol. of Transf. to Employee thousand Must be fully transferred within 3 years 25 <code>cvert</code> <code>decimal(9,0)</code> Stock Ownership Transf. thousand For share conversion, must be transferred within 3 years 26 <code>capdec1</code> <code>decimal(9,0)</code> Vol. of Capital Decrease thousand Treasury Shares \u00d7 Capital Reduction Ratio 27 <code>er_rmk</code> <code>char(1)</code> Vol.-Untransferred Employee \u2013 Buyback for Employee Transfer not yet completed 28 <code>tztrandedate</code> <code>datetime</code> Announced Date of Dir. \u2013 Announcement Date Within Two Days of Board Resolution 29 <code>tcncl_dd</code> <code>datetime</code> Cancel Date \u2013 Date of Board Resolution Cancellation 30 <code>tbuy_d1</code> <code>datetime</code> Actual Start Buying Date \u2013 Actual Buyback Start Date 31 <code>tbuy_dd</code> <code>datetime</code> Actual End Buying Date \u2013 Actual Buyback End Date"},{"location":"TWN/TWNATINVS/#api-request-examples","title":"API Request Examples","text":"<p>Example</p> RESTPythonRC#vb.net <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/ATINVS.json?api_key=&lt;YOURAPIKEY&gt;\n</code></pre> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"\ndata = tejapi.get('TWN/ATINVS')\n</code></pre> <pre><code>library(\"Tejapi\")\nTejapi.api_key(\"YOURAPIKEY\")\nyourdata&lt;- Tejapi('TWN/ATINVS')\n</code></pre> <pre><code>using Tejapi;\nvar client = new TejClient(\"&lt;YOURAPIKEY&gt;\");\nvar result = await client.GetAsync(\"TWN/ATINVS\");\n</code></pre> <pre><code>Imports Tejapi\nDim client As TejClient = New TejClient(\"&lt;YOURAPIKEY&gt;\")\nDim result As DataTable = Await client.GetAsync(\"TWN/ATINVS\")\n</code></pre>"},{"location":"TWN/TWNATINVS1/","title":"[Repurchase Data of Listed/OTC Companies \u2013 Large-scale Buybacks] \u2013 Detailed Field Descriptions","text":""},{"location":"TWN/TWNATINVS1/#table-overview","title":"Table Overview","text":"<p>Abstract</p> <ul> <li>Table Name\uff1aTWN/ATINVS1</li> <li>Data Source: Market Observation Post System (MOPS), Taiwan</li> <li>Reference Code Table: TWN/ANPRCSTD </li> <li>Code Column: coid</li> <li>Publication Date Column: mdate</li> </ul>"},{"location":"TWN/TWNATINVS1/#key-indicators","title":"Key Indicators","text":"<ul> <li> <p>Time Range Last 5 Years</p> </li> <li> <p>Update Frequency Daily</p> </li> </ul>"},{"location":"TWN/TWNATINVS1/#field-descriptions","title":"Field Descriptions","text":"# Field Name Data Type Field Description Unit Field Explanation 1 <code>coid</code> char(7) Co_ID - Company Code 2 <code>mdate</code> datetime Buying Day - Date of Purchase 3 <code>key3</code> char(3) OD - Serial number 4 <code>ts_od</code> decimal(6,1) Applying Times - The board of directors, in a significant move, has resolved to buy back shares for the nth time. This decision, which includes the announcement of non-regular treasury shares, is a crucial part of our material information and financial report. 5 <code>buy_od</code> decimal(6,1) Buying Times - Nth buyback reaches a certain standard, the number of decimal places is the number of non-regular treasury stock announcements (material information or financial reports). 6 <code>share1</code> decimal(9,0) Buying Volume - Number of buybacks. Some companies disclose the cumulative number of buybacks in their announcements, and TEJ will check it logically here. 7 <code>uprc1</code> decimal(9,2) Average Buying Price - Total Purchase Price / Number of Buybacks 8 <code>ttlprc1</code> decimal(9,0) Buying Amount - Total amount of shares bought back. 9 <code>ac_shr</code> decimal(9,0) Accumulate Volume - The accumulated number of shares held by the company (in sheets) is based on the data from the announcement of the completion of the buyback. 10 <code>ac_pct</code> decimal(6,2) Accumulate Volume% - The accumulated number of shares held / outstanding in yuan, in the USA: dollar, etc."},{"location":"TWN/TWNATINVS1/#api-request-examples","title":"API Request Examples","text":"<p>Examples</p> RESTPythonRC#vb.net <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/ATINVS1.json?api_key=&lt;YOURAPIKEY&gt;\n</code></pre> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"\ndata = tejapi.get('TWN/ATINVS1')\n</code></pre> <pre><code>library(\"Tejapi\")\nTejapi.api_key(\"YOURAPIKEY\")\nyourdata &lt;- Tejapi('TWN/ATINVS1')\n</code></pre> <pre><code>using Tejapi;\nvar client = new TejClient(\"&lt;YOURAPIKEY&gt;\");\nvar result = await client.GetAsync(\"TWN/ATINVS1\");\n</code></pre> <pre><code>Imports Tejapi\nDim client As TejClient = New TejClient(\"&lt;YOURAPIKEY&gt;\")\nDim result As DataTable = Await client.GetAsync(\"TWN/ATINVS1\")\n</code></pre>"},{"location":"TWN/TWNATINVS2/","title":"[Repurchase Performance Statistics (Listed/OTC)] \u2013 Detailed Field Descriptions","text":""},{"location":"TWN/TWNATINVS2/#table-overview","title":"Table Overview","text":"<p>Abstract</p> <ul> <li>Table Name\uff1aTWN/ATINVS2</li> <li>Data Source: Market Observation Post System (MOPS), Taiwan, Financial Statements  </li> <li>Reference Code Table: TWN/ANPRCSTD  </li> <li>Code Column: coid  </li> <li>Publication Date Column: mdate</li> </ul>"},{"location":"TWN/TWNATINVS2/#key-indicators","title":"Key Indicators","text":"<ul> <li> <p>Time Range Last 5 Years</p> </li> <li> <p>Update Frequency Daily</p> </li> </ul>"},{"location":"TWN/TWNATINVS2/#field-descriptions","title":"Field Descriptions","text":"# Field Name Data Type Field Description Unit Field Explanation 1 <code>coid</code> char(7) Co_ID - Company Code 2 <code>mdate</code> datetime Date of Dir. Meeting - Date of Board Meeting 3 <code>key3</code> decimal(3,0) No. - Number of repurchase applications on the same resolution date 4 <code>times</code> decimal(6,1) Buying Times - Integer part for public data; decimal for financial disclosure data 5 <code>tzdate1</code> datetime Announced Beginning - Start date of repurchase period 6 <code>tzdate</code> datetime Announced Ending - End date of repurchase period 7 <code>uprc_u</code> decimal(9,2) Lower Unit Price NTD Lower bound of repurchase price range 8 <code>uprc_l</code> decimal(9,2) Upper Unit Price(dollar) NTD Upper bound of repurchase price range 9 <code>prc_ul</code> decimal(9,0) Buyable Upper Amount K NTD Maximum repurchase amount 10 <code>share1</code> decimal(9,0) Announced Buying Vol K shares Expected number of shares to repurchase 11 <code>ttlprc</code> decimal(9,0) Amount of Buying K NTD Total repurchase value 12 <code>croi</code> decimal(9,4) ROI during a Period% % Stock return during the repurchase period 13 <code>wcroi</code> decimal(9,4) WROI during a Period% % Weighted index return during the repurchase period 14 <code>croi_b</code> decimal(9,4) ROI Before Announce% % Accumulated return one month before the resolution date 15 <code>wcroi_b</code> decimal(9,4) WROI Before Announce% % Weighted index return one month before 16 <code>croi_n</code> decimal(9,4) ROI After the End% % Accumulated return one month after repurchase end date 17 <code>wcroi_n</code> decimal(9,4) WROI After the End% % Weighted index return one month after 18 <code>ttl_ex</code> decimal(9,0) Institution Trading% K NTD Net buy/sell by institutional investors during the repurchase period 19 <code>chg_ls</code> decimal(9,0) Margin Transaction K shares Total change in margin during the repurchase period 20 <code>r505_b</code> decimal(15,2) Debt ratio Before A.% % Latest debt ratio before start date (parent company) 21 <code>r505_n</code> decimal(15,2) Debt ratio After End% % Latest debt ratio_ 22 t0112_b decimal(12,0) Cash &amp; Eq. Before A. K NTD Cash &amp; Equivalents Before Announcement 23 t0112_n decimal(12,0) Cash &amp; Eq. After End K NTD Cash &amp; Equivalents After End 24 cptn_b decimal(15,2) Treasure over Cash B % Treasury Stock over Cash Before 25 cptn_n decimal(15,2) Treasure over Cash A % Treasury Stock over Cash After 26 chg_ldir decimal(15,2) Change of DIR% B. % Change of Director Shareholding Before 27 chg_ndir decimal(15,2) Change of DIR% A. % Change of Director Shareholding After 28 chg_lmgt decimal(15,2) Change of MGT% B. % Change of Management Shareholding Before 29 chg_nmgt decimal(15,2) Change of MGT% A. % Change of Management Shareholding After"},{"location":"TWN/TWNATINVS2/#api-request-examples","title":"API Request Examples","text":"<p>Examples</p> RESTPythonRC#vb.net <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/ATINVS2.json?api_key=&lt;YOURAPIKEY&gt;\n</code></pre> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"\ndata = tejapi.get('TWN/ATINVS2')\n</code></pre> <pre><code>library(\"Tejapi\")\nTejapi.api_key(\"YOURAPIKEY\")\nyourdata &lt;- Tejapi('TWN/ATINVS2')\n</code></pre> <pre><code>using Tejapi;\nvar client = new TejClient(\"&lt;YOURAPIKEY&gt;\");\nvar result = await client.GetAsync(\"TWN/ATINVS2\");\n</code></pre> <pre><code>Imports Tejapi\nDim client As TejClient = New TejClient(\"&lt;YOURAPIKEY&gt;\")\nDim result As DataTable = Await client.GetAsync(\"TWN/ATINVS2\")\n</code></pre>"},{"location":"TWN/TWNAVSALE/","title":"[Listed Companies Monthly Revenue and Earnings] Detailed Field Description","text":""},{"location":"TWN/TWNAVSALE/#table-overview","title":"Table Overview","text":"<p>Abstract</p> <ul> <li>Table Name\uff1aTWN/AVSALE</li> <li>Data Source: Primarily from monthly revenue announcements; earnings, estimates, and non-performing loan ratios are compiled from company preliminary earnings announcements, financial reports, capital formation files, and news reports. <ul> <li>Before December 2012, standalone revenue disclosure was mandatory by the 10<sup>th</sup> of each month; consolidated revenue mainly came from company news reports, material information, and investor conferences. </li> <li>From January 2013, after adopting IFRS (International Financial Reporting Standards), financial statements are primarily based on consolidated statements. To align with this change, monthly revenue reporting shifted from \"standalone revenue\" to \"consolidated revenue.\" Companies without subsidiaries should report individual revenue. Companies on the Emerging Stock Market and non-listed public companies began implementing this in the 2015 fiscal year, but could adopt it earlier from January 2013. </li> <li>Information during the 2012 IFRS transition period maintains the originally disclosed values, but for companies that began adopting IFRS in 2013, the previous year's comparative information is replaced with post-IFRS conversion values.</li> </ul> </li> <li>Reference Code Table: TWN/ANPRCSTD </li> <li>Code Column: coid</li> <li>Publication Date Column: mdate</li> </ul>"},{"location":"TWN/TWNAVSALE/#key-indicators","title":"Key Indicators","text":"<ul> <li> <p>Time Range Last 5 Years</p> </li> <li> <p>Update Frequency Daily</p> </li> </ul>"},{"location":"TWN/TWNAVSALE/#field-descriptions","title":"Field Descriptions","text":"# Field Name Data Type Field Chinese Name Unit Field Explanation 1 <code>coid</code> char(7) Company - Company 2 <code>mdate</code> datetime Year-Month - Year-Month 3 <code>annd_s</code> datetime Revenue Release Date - Since monthly revenue information comes from three main sources: monthly revenue announcements, material information, and investor conferences, the revenue release date is the earliest date when revenue-related information is disclosed.<sup>1</sup> 4 <code>d0001</code> decimal(12,0) Monthly Revenue - When releasing new monthly revenue for the following year, if there is an update to \"last year's monthly revenue,\" this item will be retroactively adjusted.<sup>2</sup> 5 <code>d0002</code> decimal(12,0) Last Year's Monthly Revenue Thousand Last year's monthly revenue for the same period. From 2013/01, changed to primarily consolidated data. 6 <code>d0003</code> decimal(9,2) Monthly Revenue Growth Rate - (Monthly Revenue - Last Year's Monthly Revenue) / ABS(Last Year's Monthly Revenue) *100(%)<sup>2</sup> 7 <code>d0004</code> decimal(9,2) Monthly Revenue MoM Change - (Current Month's Revenue - Previous Month's Revenue) / ABS(Previous Month's Revenue) *100(%)<sup>3</sup> 8 <code>d0005</code> decimal(12,0) YTD Revenue - For non-calendar fiscal years, converted to accumulate from January.<sup>2</sup> 9 <code>d0006</code> decimal(12,0) Last Year's YTD Revenue Thousand For non-calendar fiscal years, converted to accumulate from January.<sup>2</sup> 10 <code>d0007</code> decimal(9,2) YTD Revenue Growth Rate - (YTD Revenue - Last Year's YTD Revenue) / ABS(Last Year's YTD Revenue) *100(%)<sup>2</sup> 11 <code>t8107</code> decimal(12,0) TTM Revenue Thousand Sum of monthly revenues for the past 12 months, calculated from the current month.<sup>4</sup> 12 <code>t8111</code> decimal(12,0) Last Year's TTM Revenue - Sum of last year's monthly revenues for the past 12 months, calculated from the same month last year.<sup>4</sup> 13 <code>r18</code> decimal(9,2) TTM Revenue Growth Rate - (TTM Revenue - Last Year's TTM Revenue) / ABS(Last Year's TTM Revenue) *100(%)<sup>4</sup> 14 <code>t8133</code> decimal(12,0) 3-Month Revenue Thousand Sum of monthly revenues for the past 3 months, calculated from the current month.<sup>5</sup> 15 <code>t8134</code> decimal(12,0) Last Year's 3-Month Revenue - Sum of last year's monthly revenues for the past 3 months, calculated from the same month last year.<sup>5</sup> 16 <code>r25</code> decimal(9,2) 3-Month Revenue Growth Rate - (3-Month Revenue - Last Year's 3-Month Revenue) / ABS(Last Year's 3-Month Revenue) *100(%)<sup>5</sup> 17 <code>r26</code> decimal(9,2) 3-Month Revenue MoM Change - 3-Month Revenue MoM Change % = <code>(Current 3-Month Revenue - Previous Month's 3-Month Revenue) / ABS(Previous Month's 3-Month Revenue) *100(%)</code><sup>6</sup> 18 <code>r26a</code> decimal(9,2) 3-Month Revenue Variation Rate - <code>3-Month Revenue Variation Rate % ([3-Month Revenue] \u2013 Initial [3-Month Revenue]) / ABS( Initial [3-Month Revenue]) * 100(%)</code><sup>7</sup>"},{"location":"TWN/TWNAVSALE/#api-request-examples","title":"API Request Examples","text":"<p>Examples</p> RESTPythonRC#vb.net <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/AVSALE.json?api_key=&lt;YOURAPIKEY&gt;\n</code></pre> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"\ndata = tejapi.get('TWN/AVSALE')\n</code></pre> <pre><code>library(\"Tejapi\")\nTejapi.api_key(\"YOURAPIKEY\")\nyourdata&lt;- Tejapi('TWN/AVSALE')\n</code></pre> <pre><code>using Tejapi;\nvar client = new TejClient(\"&lt;YOURAPIKEY&gt;\");\nvar result = await client.GetAsync(\"TWN/AVSALE\");\n</code></pre> <pre><code>Imports Tejapi\nDim client As TejClient = New TejClient(\"&lt;YOURAPIKEY&gt;\")\nDim result As DataTable = Await client.GetAsync(\"TWN/AVSALE\")\n</code></pre> <ol> <li> <p>This information has been provided by TEJ since 2013\u00a0\u21a9</p> </li> <li> <p>Before 2012/12, this was parent company revenue data; from 2013/01, it was changed to primarily consolidated revenue data.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Before 2012/12, this compared parent company revenue data; from 2013/01, it compared primarily consolidated revenue data. Due to the inconsistency in comparison baseline between 2012/12 and 2013/01, this calculation was not available for 2013/01 and resumed from 2013/02.\u00a0\u21a9</p> </li> <li> <p>Before 2012/12, this was parent company revenue data; from 2013/01, it was changed to primarily consolidated revenue data. Due to the difference in disclosure standards before and after 2013/01, consolidated data calculations start from 2013/12.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>Before 2012/12, this was parent company revenue data; from 2013/01, it was changed to primarily consolidated revenue data. Due to the difference in disclosure standards before and after 2013/01, consolidated data calculations start from 2013/03.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>Before 2012/12, this was parent company revenue data; from 2013/01, it was changed to primarily consolidated revenue data. Due to the difference in disclosure standards before and after 2013/01, consolidated data calculations start from 2013/04.\u00a0\u21a9</p> </li> <li> <p>Initial refers to the 3-month revenue of the month prior to the start of the current 3-month period. For example, the initial period for the 3-month revenue of 2016/11 refers to the 3-month revenue of 2016/08.\u00a0\u21a9</p> </li> </ol>"},{"location":"tutorial/R_Documentation/","title":"R Documentation","text":"<p>The following documentation explains how to use the TEJ R API to access the TEJ database.</p>"},{"location":"tutorial/R_Documentation/#installation","title":"Installation","text":"<p>Simply use R's built-in <code>install.packages</code> to install the <code>tejapi</code> package:</p> <p>Install the R package</p> <pre><code>install.packages(\"Tejapi\")\n</code></pre>"},{"location":"tutorial/R_Documentation/#authentication","title":"Authentication","text":"<p>After installation, include the following lines at the beginning of your script:</p> <p>Authentication</p> <pre><code>library(\"Tejapi\")\nTejapi.api_key(\"YOURAPIKEY\")\n</code></pre>"},{"location":"tutorial/R_Documentation/#usage","title":"Usage","text":"<p>Take the unadjusted stock price (daily) for listed (OTC) companies, TWN/APRCD, as an example. You can directly retrieve it using the <code>Tejapi</code> method, as shown below:</p> <p>API Data Retrieval Example for Stock Prices(TWN/APRCD)</p> <pre><code>priceData &lt;- Tejapi(\"TWN/APRCD\")\n</code></pre> <p>Note:</p> <p>If no filter conditions are provided, all data will be retrieved. It is recommended to apply appropriate filters as explained below.</p>"},{"location":"tutorial/R_Documentation/#data-filtering","title":"Data Filtering","text":"<p>If you need to filter by fields (e.g., only retrieve the Taiwan Weighted Index (Y9999)), simply add a filter condition such as <code>coid='Y9999'</code>:</p> <p>Single Column Filtering</p> <pre><code>priceData &lt;- Tejapi('TWN/APRCD', coid='Y9999')\n</code></pre> <p>To retrieve two indices, <code>Y9999</code> and <code>Y9998</code>, use a sequence condition:</p> <p>Multiple Value Selection</p> <pre><code>priceData &lt;- Tejapi('TWN/APRCD', coid=c('Y9999','Y9998'))\n</code></pre> <p>The system limits a single request to a maximum of 10,000 records. </p> <p>You may use <code>paginate=TRUE</code> to automatically fetch data in multiple batches:</p> <p>Pagination for Large Data Sets</p> <pre><code>priceData &lt;- Tejapi('TWN/APRCD', coid='Y9999', paginate=TRUE)\n</code></pre> <p>Note:</p> <p>The system limits each request to a maximum of 10,000 records. You can use the <code>paginate=TRUE</code> parameter to retrieve data in batches, but the total number of records is capped at 1,000,000. Please use appropriate filters to reduce data volume.</p> <p>You can also apply multiple field filters:</p> <p>Multiple Column Filtering Syntax</p> <pre><code>priceData &lt;- Tejapi('TWN/APRCD', coid='Y9999', mdate='2018-01-20', paginate=TRUE)\n</code></pre>"},{"location":"tutorial/R_Documentation/#column-filtering","title":"Column Filtering","text":"<p>To retrieve only a single column, use the <code>columns</code> parameter in <code>opts</code>. </p> <p>For example, to retrieve just the opening price (<code>open_d</code>):</p> <p>Retrieve the opening price column (open_d)</p> <pre><code>priceData &lt;- Tejapi('TWN/APRCD', opts.columns='open_d')\n</code></pre> <p>For multiple columns (e.g., <code>mdate</code>, <code>open_d</code>):</p> <p> c( ' mdate ' , ' open_d ' ) </p> <pre><code>priceData &lt;- Tejapi('TWN/APRCD', opts.columns=c('mdate','open_d'))\n</code></pre>"},{"location":"tutorial/R_Documentation/#data-filtering-operations","title":"Data Filtering Operations","text":"<p>You can filter data by value ranges. </p> <p>For example, to retrieve data with a trade date after 2018-01-01:</p> <p>Retrieving data where the transaction date is greater than 2018-01-01</p> <pre><code>priceData &lt;- Tejapi('TWN/APRCD', coid='Y9999', mdate.gt='2018-01-01', paginate=TRUE)\n</code></pre> <p>To retrieve data with a trade date between 2018-01-01 and 2018-02-01:</p> <p>Retrieving data where the transaction date is greater than 2018-01-01 and less than 2018-02-01</p> <pre><code>priceData &lt;- Tejapi('TWN/APRCD', coid='Y9999', mdate.gt='2018-01-01', mdate.lt='2018-02-01', paginate=TRUE)\n</code></pre> Filter Operator Description Example <code>=</code> Field is equal to the specified value <code>coid='Y9999'</code> <code>gt</code> Field is greater than the specified value <code>mdate.gt='2018-01-01'</code> <code>lt</code> Field is less than the specified value <code>mdate.lt='2018-01-01'</code> <code>gte</code> Field is greater than or equal to value <code>mdate.gte='2018-01-01'</code> <code>lte</code> Field is less than or equal to value <code>mdate.lte='2018-01-01'</code> <code>ne</code> Field is not equal to the specified value <code>mdate.ne='2018-01-01'</code>"},{"location":"tutorial/R_Documentation/#query-parameters","title":"Query Parameters","text":"Parameter Required Description Example <code>columns</code> No Specifies the fields to retrieve, separated by commas <code>opts.columns=c('coid','mdate','val')</code> <code>per_page</code> No Number of records per request (max 10,000); total records \u2264 1,000,000 <code>opts.per_page=100</code> <code>sort</code> No Sort by field and order using <code>[field].[order]</code> format (<code>asc</code> or <code>desc</code>) <code>opts.sort='mdate.desc'</code> <code>pivot</code> No Pivot table function; converts data into columns (only for financial tables) <code>opts.pivot='true'</code>"},{"location":"tutorial/dotnetapi/","title":".NET Documentation","text":"<p>The following document explains how to use the Tejapi.NET API to access the TEJ database.</p>"},{"location":"tutorial/dotnetapi/#installation","title":"Installation","text":"<p>Installation</p> nuget.net framework 4"},{"location":"tutorial/dotnetapi/#supported-platforms","title":"Supported Platforms","text":"<ul> <li>.NET Core 2.0</li> <li>.NET Framework 4.6.1 or above</li> <li>Xamarin.iOS</li> <li>Xamarin.Android</li> <li>Universal Windows Platform  <pre><code>PM&gt; Install-Package Tejapi.NET\n</code></pre> Please refer to the package information of Tejapi.NET on nuget.org.</li> </ul>"},{"location":"tutorial/dotnetapi/#supported-platforms_1","title":"Supported Platforms","text":"<ul> <li>.NET Framework 4.0 or above </li> </ul> <pre><code>PM&gt; Install-Package Tejapi.NET4\n</code></pre> <p>Please refer to the package information of Tejapi.NET4 on nuget.org. </p> <p>Or directly download Tejapi.NET4.zip here.</p>"},{"location":"tutorial/dotnetapi/#authentication","title":"Authentication","text":"<p>After installation, you need to add a reference to your program.</p> <p>Add reference</p> c#vb.net <pre><code>using Tejapi;\n</code></pre> <pre><code>Imports Tejapi\n</code></pre> <p>Initialize the object and fill in your APIKEY.</p> <p>Initialize the object</p> c#vb.net <pre><code>var client = new TejClient(\"&lt;YOURAPIKEY&gt;\");\n</code></pre> <pre><code>Dim client As TejClient = New TejClient(\"&lt;YOURAPIKEY&gt;\")\n</code></pre>"},{"location":"tutorial/dotnetapi/#usage","title":"Usage","text":"<p>Take the listed (uncorrected) stock prices (daily) <code>TWN/APRCD</code> as an example.</p> <p>You can directly use the Tejapi method to retrieve the data, and the returned class is <code>System.Data.Datatable</code>.</p> <p>API Data Retrieval Example for Stock Prices(TWN/APRCD)</p> c#vb.net <pre><code>//Asynchronously fetch data (nuget)\nvar result = await client.GetAsync(\"TWN/APRCD\");\n\n//Or synchronously (nuget)\nvar result = await client.GetAsync(\"TWN/APRCD\").Result;\n\n//.NET Framework 4 only uses synchronous\nvar result = client.Get(\"TWN/APRCD\");var client = new TejClient(\"&lt;YOURAPIKEY&gt;\");\n</code></pre> <pre><code>Dim client As TejClient = New TejClient(\"&lt;YOURAPIKEY&gt;\")\n</code></pre> Tip <p>If no filter condition is provided, all data will be retrieved. It is recommended to use the filter method introduced below to add appropriate filter conditions.</p>"},{"location":"tutorial/dotnetapi/#data-filtering","title":"Data Filtering","text":"<p>If you need to filter by column, such as only retrieving the Taiwan Weighted Stock Index (Y9999), you can directly add the column filter condition <code>coid=Y9999</code>.</p> <p>Single Column Filtering</p> c#vb.net <pre><code>var rowFilter = \"coid=Y9999\";\n//nuget\nvar result = await client.GetAsync(\"TWN/APRCD\",rowFilter);\n\n//.net framework4\nvar result = client.Get(\"TWN/APRCD\",rowFilter);\n</code></pre> <pre><code>Dim rowFilter = \"coid=Y9999\"\n//nuget\nDim result As DataTable = Await client.GetAsync(\"TWN/APRCD\",rowFilter)\n\n//.net framework4\nDim result As DataTable = client.Get(\"TWN/APRCD\",rowFilter)\n</code></pre> <p>Or to retrieve two indices, Y9999 and Y9998, at the same time, use the sequence condition <code>coid=Y9999,Y9998</code>.</p> <p>Multiple Value Selection</p> c#vb.net <pre><code>var rowFilter = \"coid=Y9999,Y9998\";\n//nuget\nvar result = await client.GetAsync(\"TWN/APRCD\",rowFilter);\n\n//.net framework4\nvar result = client.Get(\"TWN/APRCD\",rowFilter);\n</code></pre> <pre><code>Dim rowFilter = \"coid=Y9999,Y9998\"\n//nuget\nDim result As DataTable = Await client.GetAsync(\"TWN/APRCD\",rowFilter)\n\n//.net framework4\nDim result As DataTable = client.Get(\"TWN/APRCD\",rowFilter)\n</code></pre> <p>The data retrieval limit is up to 10,000 records per request, and you can add <code>paginate:true</code>, so the system will automatically paginate the data.</p> <p>Pagination for Large Data Sets</p> c#vb.net <pre><code>var rowFilter = \"coid=Y9999\";\n//nuget\nvar result = await client.GetAsync(\"TWN/APRCD\",rowFilter, paginate:true);\n\n//.net framework4\nvar result = client.Get(\"TWN/APRCD\",rowFilter, paginate:true);\n</code></pre> <pre><code>Dim rowFilter = \"coid=Y9999\"\n//nuget\nDim result As DataTable = Await client.GetAsync(\"TWN/APRCD\",rowFilter,paginate:=True)\n\n//.net framework4\nDim result As DataTable = client.Get(\"TWN/APRCD\",rowFilter,paginate:=True)\n</code></pre> Tip <p>The system limits the maximum number of records to 10,000 per request. You can use the paginate:true parameter to paginate the data, but the total number of records is limited to 1,000,000. Please consider using filter conditions to reduce the number of records</p> <p>You can filter by multiple columns, and conditions are separated by <code>&amp;</code>.</p> <p>Multiple Column Filtering Syntax</p> c#vb.net <pre><code>var rowFilter = \"coid=Y9999&amp;mdate=2018-12-05\";\n//nuget\nvar result = await client.GetAsync(\"TWN/APRCD\",rowFilter, paginate:true)\n\n//.net framework4\nvar result = client.Get(\"TWN/APRCD\",rowFilter, paginate:true);\n</code></pre> <pre><code>Dim rowFilter = \"coid=Y9999&amp;mdate=2018-12-05\"\n//nuget\nDim result As DataTable = Await client.GetAsync(\"TWN/APRCD\",rowFilter,paginate:=True)\n\n//.net framework4\nDim result As DataTable = client.Get(\"TWN/APRCD\",rowFilter,paginate:=True)\n</code></pre>"},{"location":"tutorial/dotnetapi/#column-filtering","title":"Column Filtering","text":"<p>If you only need to retrieve a single column, use the <code>columnFilterCriteria</code> condition. </p> <p>For example, if you only need to retrieve the opening price column <code>open_d</code></p> <p>Retrieve the opening price column (open_d)</p> c#vb.net <pre><code>var rowFilter = \"coid=Y9999\";\nvar columnFilter = \"open_d\";\n//nuget\nvar result = await client.GetAsync(\"TWN/APRCD\",rowFilter,columnFilter, paginate:true);\n\n//.net framework4\nvar result = client.Get(\"TWN/APRCD\",rowFilter,columnFilter, paginate:true);\n</code></pre> <pre><code>Dim rowFilter = \"coid=Y9999&amp;mdate=2018-12-05\"\nDim columnFilter = \"open_d\"\n//nuget\nDim result As DataTable = Await client.GetAsync(\"TWN/APRCD\",rowFilter,columnFilter,paginate:=True)\n\n//.net framework4\nDim result As DataTable = client.Get(\"TWN/APRCD\",rowFilter,columnFilter,paginate:=True)\n</code></pre> <p>Or multiple columns, separated by a comma <code>,</code> .</p> <p>For example, <code>mdate,open_d</code></p> <p>mdate,open_d</p> c#vb.net <pre><code>var rowFilter = \"coid=Y9999\";\nvar columnFilter = \"mdate,open_d\";\n//nuget\nvar result = await client.GetAsync(\"TWN/APRCD\",rowFilter,columnFilter, paginate:true);\n\n//.net framework4\nvar result = client.Get(\"TWN/APRCD\",rowFilter,columnFilter, paginate:true);\n</code></pre> <pre><code>Dim rowFilter = \"coid=Y9999&amp;mdate=2018-12-05\"\nDim columnFilter = \"mdate,open_d\"\n//nuget\nDim result As DataTable = Await client.GetAsync(\"TWN/APRCD\",rowFilter,columnFilter,paginate:=True)\n\n//.net framework4\nDim result As DataTable = client.Get(\"TWN/APRCD\",rowFilter,columnFilter,paginate:=True)\n</code></pre>"},{"location":"tutorial/dotnetapi/#data-filtering-operations","title":"Data Filtering Operations","text":"<p>You can filter data by column range, such as retrieving data where the transaction date is greater than 2018-01-01.</p> <p>Retrieving data where the transaction date is greater than 2018-01-01</p> c#vb.net <pre><code>var rowFilter = \"mdate&gt;2018-01-01\";\n//nuget\nvar result = await client.GetAsync(\"TWN/APRCD\",rowFilter, paginate:true);\n\n//.net framework4\nvar result = client.Get(\"TWN/APRCD\",rowFilter, paginate:true);\n</code></pre> <pre><code>Dim rowFilter = \"mdate&gt;2018-01-01\"\n//nuget\nDim result As DataTable = Await client.GetAsync(\"TWN/APRCD\",rowFilter,paginate:=True)\n\n//.net framework4\nDim result As DataTable = client.Get(\"TWN/APRCD\",rowFilter,paginate:=True)\n</code></pre> <p>You can filter data by column range, such as retrieving data where the transaction date is greater than 2018-01-01 and less than 2018-02-01.</p> <p>Retrieving data where the transaction date is greater than 2018-01-01 and less than 2018-02-01</p> c#vb.net <pre><code>var rowFilter = \"mdate&gt;2018-01-01&amp;mdate&lt;2018-02-01\";\n//nuget\nvar result = await client.GetAsync(\"TWN/APRCD\",rowFilter, paginate:true);\n\n//.net framework4\nvar result = client.Get(\"TWN/APRCD\",rowFilter, paginate:true);\n</code></pre> <pre><code>Dim rowFilter = \"mdate&gt;2018-01-01&amp;mdate&lt;2018-02-01\"\n//nuget\nDim result As DataTable = Await client.GetAsync(\"TWN/APRCD\",rowFilter,paginate:=True)\n\n//.net framework4\nDim result As DataTable = client.Get(\"TWN/APRCD\",rowFilter,paginate:=True)\n</code></pre> Filtering Operation Description Example <code>=</code> Specifies that the field equals a certain value <code>coid=Y9999</code> <code>&gt;</code> Specifies that the field is greate than a certain value <code>mdate&gt;2018-01-01</code> <code>&lt;</code> Specifies that the field is less than a certain value <code>mdate&lt;2018-01-01</code> <code>&gt;=</code> Specifies that the field is greater than or equal to a certain value <code>mdate&gt;=2018-01-01</code> <code>&lt;=</code> Specifies that the field is less than or equal to a certain value <code>mdate&lt;=2018-01-01</code> <code>!=</code> Specifies that the field is not equal to a certain value <code>mdate!=2018-01-01</code>"},{"location":"tutorial/dotnetapi/#other-query-parameters","title":"Other Query Parameters","text":"Parameter Required Description Example <code>perPage</code> No Specifies the number of records to retrieve per request (maximum of 10,000); total records cannot exceed 1,000,000. <code>perPage:100</code> <code>sortOrder</code> No Specifies the sorting column and order, using <code>[column_name].[sort_order]</code> format. Sort order can be ascending (asc) or descending (desc). Default is ascending. <code>sortOrder:\"mdate.desc\"</code>"},{"location":"tutorial/restapi/","title":"REST API Documentation","text":""},{"location":"tutorial/restapi/#datatables-api","title":"Datatables API","text":"<p>The TEJ REST API provides a simple way to access the TEJ database and output data in either JSON or XML format. You can also quickly retrieve the data you need using various programs or tools.</p> <p>You can access the OPEN API (Swagger) documentation here:</p> <p>Note</p> <p>You can retrieve data directly using a browser, or use tools such as curl, wget, and others.</p>"},{"location":"tutorial/restapi/#usage","title":"Usage","text":"<p>Endpoint</p> <pre><code>GET https://api.tej.com.tw/api/datatables/{datatable_code}/{table_code}.{format}?&lt;row_filter_criteria&gt;\n</code></pre> <p>Daily Unadjusted Stock Prices for TWN/APRCD</p> jsonxml <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/APRCD.json?api_key=\"YOURAPIKEY\"\n</code></pre> <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/APRCD.xml?api_key=\"YOURAPIKEY\"\n</code></pre> <p>The response data is as follows:</p> out jsonxml <p> <pre><code>{\n    \"datatable\":{\n        \"data\":[\n            [\n                \"Y9999\",\n                \"2018-05-15T00:00:00Z\",\n                10965.08,\n                10978.38,\n                10874.73,\n                10874.73,\n                7266464,\n                153439891,\n                -0.7091,\n                0.3794,\n                699338771,\n                32392361,\n                null,\n                null,\n                -0.7116,\n                100,\n                100,\n                1259280,\n                null,\n                16.4,\n                null,\n                1.81,\n                \"\",\n                1.14,\n                null,\n                4,\n                -77.66,\n                \"\",\n                \"\",\n                \"\",\n                \"TSE\"\n            ],\n            [\n                \"Y9999\",\n                \"2018-05-14T00:00:00Z\",\n                10938.3,\n                10970.24,\n                10908.86,\n                10952.39,\n                7222849,\n                145417795,\n                0.8602,\n                0.3677,\n                699338777,\n                32622949,\n                null,\n                null,\n                0.8565,\n                100,\n                100,\n                1168845,\n                null,\n                16.52,\n                null,\n                1.82,\n                \"\",\n                1.15,\n                null,\n                3.97,\n                93.41,\n                \"\",\n                \"\",\n                \"\",\n                \"TSE\"\n            ],\n            [\n                \"Y9999\",\n                \"2018-05-11T00:00:00Z\",\n                10808.4,\n                10874.63,\n                10808.4,\n                10858.98,\n                7399223,\n                165763227,\n                0.9179,\n                0.4002,\n                699338982,\n                32344168,\n                null,\n                null,\n                0.9137,\n                100,\n                100,\n                1248505,\n                null,\n                16.38,\n                null,\n                1.81,\n                \"\",\n                1.14,\n                null,\n                4.14,\n                98.77,\n                \"\",\n                \"\",\n                \"\",\n                \"TSE\"\n            ],\n            [\n                \"Y9999\",\n                \"2018-05-10T00:00:00Z\",\n                10731.68,\n                10782.06,\n                10731.68,\n                10760.21,\n                7062376,\n                139276989,\n                0.5312,\n                0.3551,\n                699339661,\n                32049300,\n                null,\n                null,\n                0.5298,\n                100,\n                100,\n                1102455,\n                null,\n                16.23,\n                null,\n                1.79,\n                \"\",\n                1.12,\n                null,\n                4.17,\n                56.86,\n                \"\",\n                \"\",\n                \"\",\n                \"TSE\"\n            ],\n            [\n                \"Y9999\",\n                \"2018-05-09T00:00:00Z\",\n                10692.89,\n                10748.6,\n                10689.81,\n                10703.35,\n                7074991,\n                135741987,\n                0.112,\n                0.3496,\n                695033357,\n                31547472,\n                null,\n                null,\n                0.1119,\n                100,\n                100,\n                1123979,\n                null,\n                16.14,\n                null,\n                1.78,\n                \"\",\n                1.12,\n                null,\n                4.2,\n                11.97,\n                \"\",\n                \"\",\n                \"\",\n                \"TSE\"\n            ],\n            [\n                \"Y9999\",\n                \"2018-05-08T00:00:00Z\",\n                10610.44,\n                10691.38,\n                10609.04,\n                10691.38,\n                7064737,\n                133691609,\n                0.8154,\n                0.333,\n                695033357,\n                31509651,\n                null,\n                null,\n                0.8121,\n                100,\n                100,\n                1042424,\n                null,\n                16.12,\n                null,\n                1.78,\n                \"\",\n                1.12,\n                null,\n                4.21,\n                86.47,\n                \"\",\n                \"\",\n                \"\",\n                \"TSE\"\n            ],\n            [\n                \"Y9999\",\n                \"2018-05-07T00:00:00Z\",\n                10581.78,\n                10632.62,\n                10555.56,\n                10604.91,\n                6108995,\n                126046786,\n                0.7174,\n                0.282,\n                695033431,\n                31247223,\n                null,\n                null,\n                0.7149,\n                100,\n                100,\n                956892,\n                null,\n                15.99,\n                null,\n                1.76,\n                \"\",\n                1.11,\n                null,\n                4.22,\n                75.54,\n                \"\",\n                \"\",\n                \"\",\n                \"TSE\"\n            ],\n            [\n                \"Y9999\",\n                \"2018-05-04T00:00:00Z\",\n                10516.45,\n                10566.37,\n                10500.97,\n                10529.37,\n                5653857,\n                120828141,\n                0.1445,\n                0.2961,\n                695035128,\n                31017892,\n                null,\n                null,\n                0.1444,\n                100,\n                100,\n                958698,\n                null,\n                15.87,\n                null,\n                1.75,\n                \"\",\n                1.1,\n                null,\n                4.25,\n                15.19,\n                \"\",\n                \"\",\n                \"\",\n                \"TSE\"\n            ],\n            [\n                \"Y9999\",\n                \"2018-05-03T00:00:00Z\",\n                10578.98,\n                10578.98,\n                10509.03,\n                10514.18,\n                5841156,\n                124397511,\n                -0.9853,\n                0.3034,\n                695035857,\n                30994925,\n                null,\n                null,\n                -0.9902,\n                100,\n                100,\n                993874,\n                null,\n                15.86,\n                null,\n                1.75,\n                \"\",\n                1.1,\n                null,\n                4.25,\n                -104.63,\n                \"\",\n                \"\",\n                \"\",\n                \"TSE\"\n            ],\n            [\n                \"Y9999\",\n                \"2018-05-02T00:00:00Z\",\n                10665.52,\n                10683.9,\n                10601.1,\n                10618.81,\n                6324416,\n                129078743,\n                -0.3666,\n                0.3245,\n                695043607,\n                31304327,\n                null,\n                null,\n                -0.3673,\n                100,\n                100,\n                1023004,\n                null,\n                16.02,\n                null,\n                1.77,\n                \"\",\n                1.11,\n                null,\n                4.21,\n                -39.07,\n                \"\",\n                \"\",\n                \"\",\n                \"TSE\"\n            ]\n        ],\n        \"columns\":[\n            {\n                \"name\":\"coid\",\n                \"type\":\"char(7)\",\n                \"description\":\"\u4ea4\u6613\u6240\u53ca\u6ac3\u6aaf\u8cb7\u8ce3\u4e2d\u5fc3\u6240\u8a02\u7684\u4ee3\u78bc\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"mdate\",\n                \"type\":\"datetime\",\n                \"description\":\"\u5e74\u6708\u65e5\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"open_d\",\n                \"type\":\"decimal(8,2)\",\n                \"description\":\"open_d\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"high_d\",\n                \"type\":\"decimal(8,2)\",\n                \"description\":\"high_d\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"low_d\",\n                \"type\":\"decimal(8,2)\",\n                \"description\":\"low_d\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"close_d\",\n                \"type\":\"decimal(8,2)\",\n                \"description\":\"close_d\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"volume\",\n                \"type\":\"decimal(9,0)\",\n                \"description\":\"\u7576\u65e5\u82e5\u6210\u4ea4\u91cf\u70ba0\uff0c\u8868\u793a\u7576\u65e5\u7121\u4ea4\u6613\uff0c\u6b64\u6642\u4e4b\u958b\u9ad8\u4f4e\u6536\u50f9\u683c\u70ba\u524d\u4e00\u65e5\u4e4b\u6536\u76e4\u50f9\u9664\u52a0\u6b0a\u6307\u6578(Y9999)\u5916\uff0c\u7522\u696d\u90e8\u5206\u7531TEJ\u884d\u751f\uff0c\u70ba\u6210\u5206\u80a1\u6210\u4ea4\u91cf\u4e4b\u52a0\u7e3d\",\n                \"unit\":\"T\"\n            },\n            {\n                \"name\":\"amount\",\n                \"type\":\"decimal(12,0)\",\n                \"description\":\"\u672a\u7121\u8003\u616e\u516c\u773e\u6d41\u901a\u91cf(free float)\uff1b\u9664\u52a0\u6b0a\u6307\u6578(Y9999)\u5916\uff0c\u7522\u696d\u90e8\u5206\u7531TEJ\u884d\u751f\",\n                \"unit\":\"NTD,T\"\n            },\n            {\n                \"name\":\"roi\",\n                \"type\":\"decimal(9,4)\",\n                \"description\":\"\u7576OTC\u8f49\u81f3TSE\u4ea4\u6613\u6642\uff0c\u5831\u916c\u7387\u4ee5\u627f\u92b7\u50f9\u8a08\u7b97\uff0c\u82e5\u7121\u627f\u92b7\u50f9\uff0c\u5247\u4ee5OTC\u6700\u5f8c\u4e00\u5929\u4e4b\u6536\u76e4\u50f9\u4f86\u8a08\u7b97\u3002\",\n                \"unit\":\"%\"\n            },\n            {\n                \"name\":\"turnover\",\n                \"type\":\"decimal(9,4)\",\n                \"description\":\"\u500b\u80a1=\u6210\u4ea4\u91cf/\u6d41\u901a\u80a1\u6578*100(%)\uff1b\u7522\u696d\uff1d\u7522\u696d\u6210\u4ea4\u91cf\u7e3d\u984d/\u7522\u696d\u6d41\u901a\u80a1\u6578*100(%)\",\n                \"unit\":\"%\"\n            },\n            {\n                \"name\":\"outstanding\",\n                \"type\":\"decimal(12,0)\",\n                \"description\":\"\u6d41\u901a\u5728\u5916\u80a1\u6578(\u5343\u80a1)\",\n                \"unit\":\"T\"\n            },\n            {\n                \"name\":\"mv\",\n                \"type\":\"decimal(12,0)\",\n                \"description\":\"\u500b\u80a1\uff1a\u6d41\u901a\u5728\u5916\u80a1\u6578(\u500b\u80a1)*\u672a\u8abf\u6574\u6536\u76e4\u50f9\uff1b\u6307\u6578\uff1a\u70ba\u53cd\u6620\u8a72\u80a1\u7968\u65bc\u5e02\u5834\u4e0a\u5be6\u969b\u53ef\u6d41\u901a\u4e4b\u80a1\u6578\uff0c\u6703\u5c07\u5404\u6210\u5206\u80a1\u4e4b\u516c\u958b\u767c\u884c\u80a1\u6578\u6263\u9664\u9577\u671f\u6027\u3001\u7b56\u7565\u6027\u6301  \u80a1\u6bd4\u4f8b\uff0c\u6545\u8a08\u7b97\u6307\u6578\u5e02\u503c\u6642\uff0c\u82e5\u8a72\u6307\u6578\u6709\u8003\u616e\u516c\u773e\u6d41\u901a\u91cf(\u4ea4\u6613\u6240\u8207FTSE\u5408\u7de8\u7684\u6307\u6578)\uff0c\u5247\u5e02\u503c\u516c\u5f0f=\u672a\u8abf\u6574\u6536\u76e4\u50f9*\u6d41\u901a\u5728\u5916\u80a1\u6578(\u500b\u80a1)*\u516c\u773e\u6d41\u901a\u4fc2\u6578(\u6b64\u4fc2\u6578\u7531\u4ea4\u6613\u6240\u63d0\u4f9b)\",\n                \"unit\":\"NTD,T\"\n            },\n            {\n                \"name\":\"bid\",\n                \"type\":\"decimal(7,2)\",\n                \"description\":\"\u6700\u5f8c\u63ed\u793a\u8cb7\u50f9\",\n                \"unit\":\"NTD\"\n            },\n            {\n                \"name\":\"offer\",\n                \"type\":\"decimal(7,2)\",\n                \"description\":\"\u6700\u5f8c\u63ed\u793a\u8ce3\u50f9\",\n                \"unit\":\"NTD\"\n            },\n            {\n                \"name\":\"roib\",\n                \"type\":\"decimal(9,4)\",\n                \"description\":\"\u5831\u916c\u7387-Ln\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"mv_pct\",\n                \"type\":\"decimal(7,3)\",\n                \"description\":\"mv_pct\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"amt_pct\",\n                \"type\":\"decimal(7,3)\",\n                \"description\":\"amt_pct\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"trn_d\",\n                \"type\":\"decimal(9,0)\",\n                \"description\":\"\u6210\u4ea4\u7b46\u6578(\u7b46)\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"per_tse\",\n                \"type\":\"decimal(7,2)\",\n                \"description\":\"per_tse\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"per_tej\",\n                \"type\":\"decimal(7,2)\",\n                \"description\":\"per_tej\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"pbr_tse\",\n                \"type\":\"decimal(7,2)\",\n                \"description\":\"pbr_tse\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"pbr_tej\",\n                \"type\":\"decimal(7,2)\",\n                \"description\":\"pbr_tej\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"limit\",\n                \"type\":\"char(1)\",\n                \"description\":\"\u80a1\u7968\u6f32\u505c\uff1a\u201d+\u201d\uff1b\u8dcc\u505c\uff1a\u201d-\u201c\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"tej_psr\",\n                \"type\":\"decimal(7,2)\",\n                \"description\":\"=\u5e02\u503c/\u6700\u8fd14\u5b63\u5408\u8a08\u4e4b\u71df\u6536\uff0cTEJ\u63d0\u4f9b\u672c\u6b04\u4f4d\u9700\u642d\u914d\u8ca1\u5831\u767c\u4f48\u6642\u9593\uff0c\u76ee\u524d\u66f4\u65b0\u65b9\u5f0f\u70ba\u6bcf\u5e746/1\u300110/1\u3001\u53ca12/1\u66f4\u65b0\u71df\u6536\u8cc7\u6599\uff0c\u9996\u6b21\u4e0a\u5e02\u9700\u6eff\u4e00\u5e74\u7684\u6b21\u4e00\u5e74\u5ea61/1\u59cb\u8a08\u7b97\u3002\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"div_yid\",\n                \"type\":\"decimal(7,2)\",\n                \"description\":\"\u5373\u6bcf\u80a1\u80a1\u5229\u8207\u7576\u65e5\u540d\u76ee\u6536\u76e4\u50f9\u4e4b\u6bd4\u503c\uff0c\u5176\u4e2d\u6bcf\u80a1\u80a1\u5229=\u8a72\u516c\u53f8\u6bcf\u80a1\u914d\u767c\u4e4b\u73fe\u91d1\u80a1\u5229+\u76c8\u9918\u8f49\u589e\u8cc7\u80a1\u7968\u80a1\u5229\u3002\u6b64\u6b04\u4f4d\u7531\u4ea4\u6613\u6240\u63d0\u4f9b\uff0c\u5176\u4e2d97/07/17\u4ee5\u524d\u4e4b\u8cc7\u6599\u4ea4\u6613\u6240\u8a08\u7b97\u65b9\u5f0f\u4fc2\u63a1\u53d6\u524d\u4e00\u7b46\u6709\u767c\u653e\u80a1\u5229\u4e4b\u8cc7\u6599\u4f86\u8a08\u7b97\uff0c\u5373\u7576\u5e74\u5ea6\u516c\u53f8\u4e0d\u767c\u653e\u80a1\u5229\uff0c\u5247\u4ee5\u524d\u4e00\u5e74\u5ea6\u6216\u66f4\u65e9\u4ee5\u524d\u7684\u80a1\u5229\u8cc7\u6599\u8a08\u7b97\u4e0d\u5408\u7406\uff0c\u654597/07/17\u4ea4\u6613\u6240\u5df2\u4fee\u6b63\u70ba\u4ee5\u8a72\u5e74\u5ea6\u4e4b\u8cc7\u6599\u4f86\u8a08\u7b97\uff0c\u6545\u524d\u5f8c\u671f\u8cc7\u6599\u6703\u6709\u6240\u5dee\u7570\u3002\",\n                \"unit\":\"%\"\n            },\n            {\n                \"name\":\"tej_cdiv\",\n                \"type\":\"decimal(7,2)\",\n                \"description\":\"=\u73fe\u91d1\u80a1\u5229\u7e3d\u984d/\u5e02\u503c*100%\uff0cTEJ\u63d0\u4f9b\",\n                \"unit\":\"%\"\n            },\n            {\n                \"name\":\"clschg\",\n                \"type\":\"decimal(8,2)\",\n                \"description\":\"\u80a1\u50f9\u6f32\u8dcc(\u5143)\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"xattn1\",\n                \"type\":\"char(1)\",\n                \"description\":\"\u516c\u4f48\u7570\u5e38\u4ea4\u6613\u6709\u50f9\u8b49\u5238\u4e4b\u4ea4\u6613\u8cc7\u8a0a\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"xattn2\",\n                \"type\":\"char(1)\",\n                \"description\":\"\u5c0d\u9023\u7e8c\u516c\u4f48\u6ce8\u610f\u4ea4\u6613\u8cc7\u8a0a\u4e4b\u6709\u50f9\u8b49\u5238\u63a1\u53d6\u4e4b\u8655\u7f6e\u63aa\u65bd\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"xstat1\",\n                \"type\":\"char(1)\",\n                \"description\":\"\u5168\u984d\u4ea4\u5272(Y)\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"pmkt\",\n                \"type\":\"char(5)\",\n                \"description\":\"\u5e02\u5834\u5225\",\n                \"unit\":\"-\"\n            }\n        ]\n    },\n    \"meta\":{\n        \"next_cursor_id\":\"uRKchQOqqW\"\n    }\n}\n</code></pre> </p> <p> <pre><code>&lt;tej-response&gt;\n    &lt;datatable&gt;\n        &lt;data type=\"array\"&gt;\n            &lt;datum type=\"array\"&gt;\n                &lt;datum&gt;Y9999&lt;/datum&gt;\n                &lt;datum type=\"dateTime\"&gt;2018-05-15T00:00:00Z&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10965.08&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10978.38&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10874.73&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10874.73&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;7266464&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;153439891&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;-0.7091&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.3794&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;699338771&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;32392361&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;-0.7116&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;1259280&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;16.40&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;1.81&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum type=\"float\"&gt;1.14&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;4.00&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;-77.66&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum&gt;TSE&lt;/datum&gt;\n            &lt;/datum&gt;\n            &lt;datum type=\"array\"&gt;\n                &lt;datum&gt;Y9999&lt;/datum&gt;\n                &lt;datum type=\"dateTime\"&gt;2018-05-14T00:00:00Z&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10938.30&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10970.24&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10908.86&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10952.39&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;7222849&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;145417795&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.8602&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.3677&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;699338777&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;32622949&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;0.8565&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;1168845&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;16.52&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;1.82&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum type=\"float\"&gt;1.15&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;3.97&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;93.41&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum&gt;TSE&lt;/datum&gt;\n            &lt;/datum&gt;\n            &lt;datum type=\"array\"&gt;\n                &lt;datum&gt;Y9999&lt;/datum&gt;\n                &lt;datum type=\"dateTime\"&gt;2018-05-11T00:00:00Z&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10808.40&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10874.63&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10808.40&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10858.98&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;7399223&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;165763227&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.9179&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.4002&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;699338982&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;32344168&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;0.9137&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;1248505&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;16.38&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;1.81&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum type=\"float\"&gt;1.14&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;4.14&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;98.77&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum&gt;TSE&lt;/datum&gt;\n            &lt;/datum&gt;\n            &lt;datum type=\"array\"&gt;\n                &lt;datum&gt;Y9999&lt;/datum&gt;\n                &lt;datum type=\"dateTime\"&gt;2018-05-10T00:00:00Z&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10731.68&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10782.06&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10731.68&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10760.21&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;7062376&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;139276989&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.5312&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.3551&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;699339661&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;32049300&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;0.5298&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;1102455&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;16.23&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;1.79&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum type=\"float\"&gt;1.12&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;4.17&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;56.86&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum&gt;TSE&lt;/datum&gt;\n            &lt;/datum&gt;\n            &lt;datum type=\"array\"&gt;\n                &lt;datum&gt;Y9999&lt;/datum&gt;\n                &lt;datum type=\"dateTime\"&gt;2018-05-09T00:00:00Z&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10692.89&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10748.60&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10689.81&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10703.35&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;7074991&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;135741987&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.1120&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.3496&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;695033357&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;31547472&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;0.1119&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;1123979&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;16.14&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;1.78&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum type=\"float\"&gt;1.12&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;4.20&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;11.97&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum&gt;TSE&lt;/datum&gt;\n            &lt;/datum&gt;\n            &lt;datum type=\"array\"&gt;\n                &lt;datum&gt;Y9999&lt;/datum&gt;\n                &lt;datum type=\"dateTime\"&gt;2018-05-08T00:00:00Z&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10610.44&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10691.38&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10609.04&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10691.38&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;7064737&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;133691609&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.8154&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.3330&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;695033357&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;31509651&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;0.8121&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;1042424&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;16.12&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;1.78&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum type=\"float\"&gt;1.12&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;4.21&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;86.47&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum&gt;TSE&lt;/datum&gt;\n            &lt;/datum&gt;\n            &lt;datum type=\"array\"&gt;\n                &lt;datum&gt;Y9999&lt;/datum&gt;\n                &lt;datum type=\"dateTime\"&gt;2018-05-07T00:00:00Z&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10581.78&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10632.62&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10555.56&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10604.91&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;6108995&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;126046786&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.7174&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.2820&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;695033431&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;31247223&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;0.7149&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;956892&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;15.99&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;1.76&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum type=\"float\"&gt;1.11&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;4.22&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;75.54&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum&gt;TSE&lt;/datum&gt;\n            &lt;/datum&gt;\n            &lt;datum type=\"array\"&gt;\n                &lt;datum&gt;Y9999&lt;/datum&gt;\n                &lt;datum type=\"dateTime\"&gt;2018-05-04T00:00:00Z&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10516.45&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10566.37&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10500.97&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10529.37&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;5653857&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;120828141&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.1445&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.2961&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;695035128&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;31017892&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;0.1444&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;958698&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;15.87&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;1.75&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum type=\"float\"&gt;1.10&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;4.25&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;15.19&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum&gt;TSE&lt;/datum&gt;\n            &lt;/datum&gt;\n            &lt;datum type=\"array\"&gt;\n                &lt;datum&gt;Y9999&lt;/datum&gt;\n                &lt;datum type=\"dateTime\"&gt;2018-05-03T00:00:00Z&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10578.98&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10578.98&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10509.03&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10514.18&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;5841156&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;124397511&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;-0.9853&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.3034&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;695035857&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;30994925&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;-0.9902&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;993874&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;15.86&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;1.75&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum type=\"float\"&gt;1.10&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;4.25&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;-104.63&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum&gt;TSE&lt;/datum&gt;\n            &lt;/datum&gt;\n            &lt;datum type=\"array\"&gt;\n                &lt;datum&gt;Y9999&lt;/datum&gt;\n                &lt;datum type=\"dateTime\"&gt;2018-05-02T00:00:00Z&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10665.52&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10683.90&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10601.10&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;10618.81&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;6324416&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;129078743&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;-0.3666&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;0.3245&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;695043607&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;31304327&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;-0.3673&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;100.000&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;1023004&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;16.02&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;1.77&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum type=\"float\"&gt;1.11&lt;/datum&gt;\n                &lt;datum nil=\"true\"/&gt;\n                &lt;datum type=\"float\"&gt;4.21&lt;/datum&gt;\n                &lt;datum type=\"float\"&gt;-39.07&lt;/datum&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum/&gt;\n                &lt;datum&gt;TSE&lt;/datum&gt;\n            &lt;/datum&gt;\n        &lt;/data&gt;\n        &lt;columns type=\"array\"&gt;\n            &lt;column&gt;\n                &lt;description&gt;\u4ea4\u6613\u6240\u53ca\u6ac3\u6aaf\u8cb7\u8ce3\u4e2d\u5fc3\u6240\u8a02\u7684\u4ee3\u78bc&lt;/description&gt;\n                &lt;name&gt;coid&lt;/name&gt;\n                &lt;type&gt;char(7)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\u5e74\u6708\u65e5&lt;/description&gt;\n                &lt;name&gt;mdate&lt;/name&gt;\n                &lt;type&gt;datetime&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;open_d&lt;/description&gt;\n                &lt;name&gt;open_d&lt;/name&gt;\n                &lt;type&gt;decimal(8,2)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;high_d&lt;/description&gt;\n                &lt;name&gt;high_d&lt;/name&gt;\n                &lt;type&gt;decimal(8,2)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;low_d&lt;/description&gt;\n                &lt;name&gt;low_d&lt;/name&gt;\n                &lt;type&gt;decimal(8,2)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;close_d&lt;/description&gt;\n                &lt;name&gt;close_d&lt;/name&gt;\n                &lt;type&gt;decimal(8,2)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\n                    \u7576\u65e5\u82e5\u6210\u4ea4\u91cf\u70ba0\uff0c\u8868\u793a\u7576\u65e5\u7121\u4ea4\u6613\uff0c\u6b64\u6642\u4e4b\u958b\u9ad8\u4f4e\u6536\u50f9\u683c\u70ba\u524d\u4e00\u65e5\u4e4b\u6536\u76e4\u50f9\n                    &lt;br /&gt;\u9664\u52a0\u6b0a\u6307\u6578(Y9999)\u5916\uff0c\u7522\u696d\u90e8\u5206\u7531TEJ\u884d\u751f\uff0c\u70ba\u6210\u5206\u80a1\u6210\u4ea4\u91cf\u4e4b\u52a0\u7e3d\n                &lt;/description&gt;\n                &lt;name&gt;volume&lt;/name&gt;\n                &lt;type&gt;decimal(9,0)&lt;/type&gt;\n                &lt;unit&gt;T&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\u672a\u7121\u8003\u616e\u516c\u773e\u6d41\u901a\u91cf(free float)\uff1b\u9664\u52a0\u6b0a\u6307\u6578(Y9999)\u5916\uff0c\u7522\u696d\u90e8\u5206\u7531TEJ\u884d\u751f&lt;/description&gt;\n                &lt;name&gt;amount&lt;/name&gt;\n                &lt;type&gt;decimal(12,0)&lt;/type&gt;\n                &lt;unit&gt;NTD,T&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\u7576OTC\u8f49\u81f3TSE\u4ea4\u6613\u6642\uff0c\u5831\u916c\u7387\u4ee5\u627f\u92b7\u50f9\u8a08\u7b97\uff0c\u82e5\u7121\u627f\u92b7\u50f9\uff0c\u5247\u4ee5OTC\u6700\u5f8c\u4e00\u5929\u4e4b\u6536\u76e4\u50f9\u4f86\u8a08\u7b97\u3002&lt;/description&gt;\n                &lt;name&gt;roi&lt;/name&gt;\n                &lt;type&gt;decimal(9,4)&lt;/type&gt;\n                &lt;unit&gt;%&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\u500b\u80a1=\u6210\u4ea4\u91cf/\u6d41\u901a\u80a1\u6578*100(%)\uff1b\u7522\u696d\uff1d\u7522\u696d\u6210\u4ea4\u91cf\u7e3d\u984d/\u7522\u696d\u6d41\u901a\u80a1\u6578*100(%)&lt;/description&gt;\n                &lt;name&gt;turnover&lt;/name&gt;\n                &lt;type&gt;decimal(9,4)&lt;/type&gt;\n                &lt;unit&gt;%&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\u6d41\u901a\u5728\u5916\u80a1\u6578(\u5343\u80a1)&lt;/description&gt;\n                &lt;name&gt;outstanding&lt;/name&gt;\n                &lt;type&gt;decimal(12,0)&lt;/type&gt;\n                &lt;unit&gt;T&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\n                    \u500b\u80a1\uff1a\u6d41\u901a\u5728\u5916\u80a1\u6578(\u500b\u80a1)*\u672a\u8abf\u6574\u6536\u76e4\u50f9\uff1b\n                    &lt;br /&gt;\u6307\u6578\uff1a\u70ba\u53cd\u6620\u8a72\u80a1\u7968\u65bc\u5e02\u5834\u4e0a\u5be6\u969b\u53ef\u6d41\u901a\u4e4b\u80a1\u6578\uff0c\u6703\u5c07\u5404\u6210\u5206\u80a1\u4e4b\u516c\u958b\u767c\u884c\u80a1\u6578\u6263\u9664\u9577\u671f\u6027\u3001\u7b56\u7565\u6027\u6301 \u80a1\u6bd4\u4f8b\uff0c\u6545\u8a08\u7b97\u6307\u6578\u5e02\u503c\u6642\uff0c\u82e5\u8a72\u6307\u6578\u6709\u8003\u616e\u516c\u773e\u6d41\u901a\u91cf(\u4ea4\u6613\u6240\u8207FTSE\u5408\u7de8\u7684\u6307\u6578)\uff0c\u5247\u5e02\u503c\u516c\u5f0f=\u672a\u8abf\u6574\u6536\u76e4\u50f9*\u6d41\u901a\u5728\u5916\u80a1\u6578(\u500b\u80a1)*\u516c\u773e\u6d41\u901a\u4fc2\u6578(\u6b64\u4fc2\u6578\u7531\u4ea4\u6613\u6240\u63d0\u4f9b)\n                &lt;/description&gt;\n                &lt;name&gt;mv&lt;/name&gt;\n                &lt;type&gt;decimal(12,0)&lt;/type&gt;\n                &lt;unit&gt;NTD,T&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\u6700\u5f8c\u63ed\u793a\u8cb7\u50f9&lt;/description&gt;\n                &lt;name&gt;bid&lt;/name&gt;\n                &lt;type&gt;decimal(7,2)&lt;/type&gt;\n                &lt;unit&gt;NTD&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\u6700\u5f8c\u63ed\u793a\u8ce3\u50f9&lt;/description&gt;\n                &lt;name&gt;offer&lt;/name&gt;\n                &lt;type&gt;decimal(7,2)&lt;/type&gt;\n                &lt;unit&gt;NTD&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\u5831\u916c\u7387-Ln&lt;/description&gt;\n                &lt;name&gt;roib&lt;/name&gt;\n                &lt;type&gt;decimal(9,4)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;mv_pct&lt;/description&gt;\n                &lt;name&gt;mv_pct&lt;/name&gt;\n                &lt;type&gt;decimal(7,3)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;amt_pct&lt;/description&gt;\n                &lt;name&gt;amt_pct&lt;/name&gt;\n                &lt;type&gt;decimal(7,3)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\u6210\u4ea4\u7b46\u6578(\u7b46)&lt;/description&gt;\n                &lt;name&gt;trn_d&lt;/name&gt;\n                &lt;type&gt;decimal(9,0)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;per_tse&lt;/description&gt;\n                &lt;name&gt;per_tse&lt;/name&gt;\n                &lt;type&gt;decimal(7,2)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;per_tej&lt;/description&gt;\n                &lt;name&gt;per_tej&lt;/name&gt;\n                &lt;type&gt;decimal(7,2)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;pbr_tse&lt;/description&gt;\n                &lt;name&gt;pbr_tse&lt;/name&gt;\n                &lt;type&gt;decimal(7,2)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;pbr_tej&lt;/description&gt;\n                &lt;name&gt;pbr_tej&lt;/name&gt;\n                &lt;type&gt;decimal(7,2)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\u80a1\u7968\u6f32\u505c\uff1a\u201d+\u201d\uff1b\u8dcc\u505c\uff1a\u201d-\u201c&lt;/description&gt;\n                &lt;name&gt;limit&lt;/name&gt;\n                &lt;type&gt;char(1)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\n                    =\u5e02\u503c/\u6700\u8fd14\u5b63\u5408\u8a08\u4e4b\u71df\u6536\uff0cTEJ\u63d0\u4f9b\n                    &lt;br /&gt;\u672c\u6b04\u4f4d\u9700\u642d\u914d\u8ca1\u5831\u767c\u4f48\u6642\u9593\uff0c\u76ee\u524d\u66f4\u65b0\u65b9\u5f0f\u70ba\u6bcf\u5e746/1\u300110/1\u3001\u53ca12/1\u66f4\u65b0\u71df\u6536\u8cc7\u6599\uff0c\u9996\u6b21\u4e0a\u5e02\u9700\u6eff\u4e00\u5e74\u7684\u6b21\u4e00\u5e74\u5ea61/1\u59cb\u8a08\u7b97\u3002\n                &lt;/description&gt;\n                &lt;name&gt;tej_psr&lt;/name&gt;\n                &lt;type&gt;decimal(7,2)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\n                    \u5373\u6bcf\u80a1\u80a1\u5229\u8207\u7576\u65e5\u540d\u76ee\u6536\u76e4\u50f9\u4e4b\u6bd4\u503c\uff0c\u5176\u4e2d\u6bcf\u80a1\u80a1\u5229=\u8a72\u516c\u53f8\u6bcf\u80a1\u914d\u767c\u4e4b\u73fe\u91d1\u80a1\u5229+\u76c8\u9918\u8f49\u589e\u8cc7\u80a1\u7968\u80a1\u5229\u3002\n                    &lt;br /&gt;\u6b64\u6b04\u4f4d\u7531\u4ea4\u6613\u6240\u63d0\u4f9b\uff0c\u5176\u4e2d97/07/17\u4ee5\u524d\u4e4b\u8cc7\u6599\u4ea4\u6613\u6240\u8a08\u7b97\u65b9\u5f0f\u4fc2\u63a1\u53d6\u524d\u4e00\u7b46\u6709\u767c\u653e\u80a1\u5229\u4e4b\u8cc7\u6599\u4f86\u8a08\u7b97\uff0c\u5373\u7576\u5e74\u5ea6\u516c\u53f8\u4e0d\u767c\u653e\u80a1\u5229\uff0c\u5247\u4ee5\u524d\u4e00\u5e74\u5ea6\u6216\u66f4\u65e9\u4ee5\u524d\u7684\u80a1\u5229\u8cc7\u6599\u8a08\u7b97\u4e0d\u5408\u7406\uff0c\u654597/07/17\u4ea4\u6613\u6240\u5df2\u4fee\u6b63\u70ba\u4ee5\u8a72\u5e74\u5ea6\u4e4b\u8cc7\u6599\u4f86\u8a08\u7b97\uff0c\u6545\u524d\u5f8c\u671f\u8cc7\u6599\u6703\u6709\u6240\u5dee\u7570\u3002\n                &lt;/description&gt;\n                &lt;name&gt;div_yid&lt;/name&gt;\n                &lt;type&gt;decimal(7,2)&lt;/type&gt;\n                &lt;unit&gt;%&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;=\u73fe\u91d1\u80a1\u5229\u7e3d\u984d/\u5e02\u503c*100%\uff0cTEJ\u63d0\u4f9b&lt;/description&gt;\n                &lt;name&gt;tej_cdiv&lt;/name&gt;\n                &lt;type&gt;decimal(7,2)&lt;/type&gt;\n                &lt;unit&gt;%&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\u80a1\u50f9\u6f32\u8dcc(\u5143)&lt;/description&gt;\n                &lt;name&gt;clschg&lt;/name&gt;\n                &lt;type&gt;decimal(8,2)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\u516c\u4f48\u7570\u5e38\u4ea4\u6613\u6709\u50f9\u8b49\u5238\u4e4b\u4ea4\u6613\u8cc7\u8a0a&lt;/description&gt;\n                &lt;name&gt;xattn1&lt;/name&gt;\n                &lt;type&gt;char(1)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\u5c0d\u9023\u7e8c\u516c\u4f48\u6ce8\u610f\u4ea4\u6613\u8cc7\u8a0a\u4e4b\u6709\u50f9\u8b49\u5238\u63a1\u53d6\u4e4b\u8655\u7f6e\u63aa\u65bd&lt;/description&gt;\n                &lt;name&gt;xattn2&lt;/name&gt;\n                &lt;type&gt;char(1)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\u5168\u984d\u4ea4\u5272(Y)&lt;/description&gt;\n                &lt;name&gt;xstat1&lt;/name&gt;\n                &lt;type&gt;char(1)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n            &lt;column&gt;\n                &lt;description&gt;\u5e02\u5834\u5225&lt;/description&gt;\n                &lt;name&gt;pmkt&lt;/name&gt;\n                &lt;type&gt;char(5)&lt;/type&gt;\n                &lt;unit&gt;-&lt;/unit&gt;\n            &lt;/column&gt;\n        &lt;/columns&gt;\n    &lt;/datatable&gt;\n    &lt;meta&gt;\n        &lt;nextCursorId&gt;tY5x2zSbCC&lt;/nextCursorId&gt;\n    &lt;/meta&gt;\n&lt;/tej-response&gt;\n</code></pre> </p> <p>Note</p> <p>The returned data is unsorted by default. To sort the results, please sort it manually after retrieval, or specify the <code>opts.sort</code> parameter.</p>"},{"location":"tutorial/restapi/#data-filtering","title":"Data Filtering","text":"<p>If you want to filter by specific fields \u2014 for example, to retrieve only the Taiwan Weighted Stock Index (<code>Y9999</code>) \u2014 simply add a field filter like <code>coid=Y9999</code> to the query.</p> <p>Single Column Filtering</p> jsonxml <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/APRCD.json?coid=Y9999&amp;api_key=\"YOURAPIKEY\"\n</code></pre> <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/APRCD.xml?coid=Y9999&amp;api_key=\"YOURAPIKEY\"\n</code></pre> <p>To retrieve multiple indices (e.g., <code>Y9999</code> and <code>Y9998</code>) at the same time, use a sequence condition like <code>coid=Y9999,Y9998</code>.</p> <p>Multiple Value Selection</p> jsonxml <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/APRCD.json?coid=Y9999,Y9998&amp;api_key=\"YOURAPIKEY\"\n</code></pre> <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/APRCD.xml?coid=Y9999,Y9998&amp;api_key=\"YOURAPIKEY\"\n</code></pre> <p>A single request can return up to 10,000 records. To retrieve additional data, use the <code>next_cursor_id</code> value returned in the response and pass it as the <code>opts.cursor_id</code> parameter in the next request.</p> <p>Use the <code>opts.cursor_id</code> for Large Data Sets</p> jsonxml <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/APRCD.json?opts.cursor_id=&lt;cursor_id_from_previous_page&gt;&amp;api_key=\"YOURAPIKEY\"\n</code></pre> <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/APRCD.xml?opts.cursor_id=&lt;cursor_id_from_previous_page&gt;&amp;api_key=\"YOURAPIKEY\"\n</code></pre>"},{"location":"tutorial/restapi/#column-filtering","title":"Column Filtering","text":"<p>If you only need to retrieve specific columns, you can use the <code>opts.columns</code> parameter to limit the output. </p> <p>For example, to retrieve only the opening price column (<code>open_d</code>):</p> <p>Retrieve the opening price column (open_d)</p> jsonxml <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/APRCD.json?opts.columns=open_d&amp;api_key=&lt;YOURAPIKEY&gt; \n</code></pre> <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/APRCD.xml?opts.columns=open_d&amp;api_key=&lt;YOURAPIKEY&gt;\n</code></pre>"},{"location":"tutorial/restapi/#data-filtering-operations","title":"Data Filtering Operations","text":"Operator Required Description Example <code>=</code> Yes Field must equal the specified value (text or number) <code>coid=Y9999</code> <code>.gt=</code> No Field is greater than the specified number <code>open_d.gt=0</code> <code>.lt=</code> No Field is less than the specified number <code>open_d.lt=0</code> <code>.gte=</code> No Field is greater than or equal to the specified number <code>open_d.gte=0</code> <code>.lte=</code> No Field is less than or equal to the specified number <code>open_d.lte=0</code> <code>.ne=</code> No Field is not equal to the specified number <code>open_d.ne=0</code>"},{"location":"tutorial/restapi/#query-parameters","title":"Query Parameters","text":"Parameter Required Description Example <code>opts.columns</code> Yes Specifies which columns to return, separated by commas <code>opts.columns=coid,mdate,open_d</code> <code>opts.per_page</code> No Number of records per page (max: 10,000). Use <code>opts.cursor_id</code> for pagination (max: 1,000,000 records total) <code>opts.per_page=100</code> <code>opts.cursor_id</code> No Use the <code>cursor_id</code> from the previous response to fetch the next page of data <code>opts.cursor_id=LK8whTtt8w</code> <code>opts.sort</code> No Specifies sorting by field and direction using the format <code>[field].[ascdesc]</code>. Default is ascending <code>opts.sort=mdate.desc</code> <code>opts.pivot</code> No Pivot the table to transform rows into columns. Currently only supported for financial tables. <code>opts.pivot=true</code>"},{"location":"tutorial/restapi/#date-format","title":"Date Format","text":"<p>All output dates use the format <code>yyyy-MM-ddTHH:mm:ssZ</code>.</p> <p>For example: <code>2018-05-09T10:20:30Z</code>.</p> <p>The following table lists the date formats supported in the filter criteria. The suffix <code>Z</code> indicates the time zone (e.g., <code>+08:00</code> for Taiwan), though it is optional.</p> \u652f\u63f4\u683c\u5f0f \u4f7f\u7528\u7bc4\u4f8b <code>yyyy-MM-ddTHH:mm:ss.SSSZ</code> <code>2018-05-09T10:20:30.000Z</code> <code>yyyy-MM-ddHH:mm:ss.SSSZ</code> <code>2018-05-0910:20:30.000Z</code> <code>yyyyMMddTHHmmss.SSSZ</code> <code>20180509T102030.000Z</code> <code>yyyy-MM-ddTHH:mm:ssZ</code> <code>2018-05-09T10:20:30Z</code> <code>yyyy-MM-dd HH:mm:ssZ</code> <code>2018-05-09 10:20:30Z</code> <code>yyyy-MM-ddHH:mm:ssZ</code> <code>2018-05-0910:20:30Z</code> <code>yyyyMMddTHHmmssZ</code> <code>20180509T102030Z</code> <code>yyyyMMddTHHmmssZ</code> <code>20180509T102030Z</code> <code>yyyy-MM-dd</code> <code>2018-05-09</code> <code>yyyy/MM/dd</code> <code>2018/05/09</code> <code>yyyyMMdd</code> <code>20180509</code>"},{"location":"tutorial/restapi/#table-information","title":"Table Information","text":"<p>The following documentation explains how to retrieve table metadata.</p>"},{"location":"tutorial/restapi/#usage_1","title":"Usage","text":"<p>in</p> <pre><code>https://api.tej.com.tw/api/datatables/{datatable_code}/{table_code}/metadata?api_key=&gt;YOURAPIKEY&gt;\n</code></pre> <p>Response Information Description</p> Parameter Description <code>dbCode</code> Database code <code>tableCode</code> Table code <code>name</code> Table name <code>description</code> Detailed description of the table <code>primaryKey</code> List of primary keys in the table <code>filters</code> List of filterable fields <code>columns</code> Column definitions:ParameterDescription<code>name</code>Column code<code>cname</code>Column name (Chinese)<code>description</code>Column description<code>type</code>Data type<code>unit</code>Unit <code>pivot</code> Whether pivoting is supported <code>status</code> Table status:ParameterDescription<code>status</code>Status<code>refreshed_at</code>Latest Data Format Modification Time"},{"location":"tutorial/restapi/#example","title":"Example","text":"<p>Get TWN/APRCD</p> <pre><code>GET https://api.tej.com.tw/api/datatables/TWN/APRCD/metadata?api_key=&lt;YOURAPIKEY&gt;\n</code></pre> out <p><pre><code>{\n    \"datatable\":{\n        \"dbCode\":\"TWN\",\n        \"tableCode\":\"APRCD\",\n        \"name\":\"\u4e0a\u5e02(\u6ac3)\u672a\u8abf\u6574\u80a1\u50f9(\u65e5)\",\n        \"description\":\"\u3010\u8cc7\u6599\u7bc4\u570d\u3011\u4e0a\u5e02\u7684\u8b49\u5238\u53ca\u6307\u6578(TSE\u53caOTC)\u3010\u8cc7\u6599\u671f\u9593\u30112000\u5e74\u81f3\u4eca\",\n        \"filters\":[\n            \"coid\",\n            \"mdate\",\n            \"open_d\",\n            \"high_d\",\n            \"low_d\",\n            \"close_d\",\n            \"volume\",\n            \"amount\",\n            \"roi\",\n            \"turnover\",\n            \"outstanding\",\n            \"mv\",\n            \"bid\",\n            \"offer\",\n            \"roib\",\n            \"mv_pct\",\n            \"amt_pct\",\n            \"trn_d\",\n            \"per_tse\",\n            \"per_tej\",\n            \"pbr_tse\",\n            \"pbr_tej\",\n            \"limit\",\n            \"tej_psr\",\n            \"div_yid\",\n            \"tej_cdiv\",\n            \"clschg\",\n            \"xattn1\",\n            \"xattn2\",\n            \"xstat1\",\n            \"pmkt\"\n        ],\n        \"primaryKey\":[\n            \"coid\",\n            \"mdate\"\n        ],\n        \"status\":{\n            \"status\":\"OK\",\n            \"refreshed_at\":\"2020-01-09T00:00:00Z\"\n        },\n        \"pivot\":false,\n        \"columns\":[\n            {\n                \"name\":\"coid\",\n                \"type\":\"char(7)\",\n                \"cname\":\"\u8b49\u5238\u4ee3\u78bc\",\n                \"description\":\"\u4ea4\u6613\u6240\u53ca\u6ac3\u6aaf\u8cb7\u8ce3\u4e2d\u5fc3\u6240\u8a02\u7684\u4ee3\u78bc\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"mdate\",\n                \"type\":\"datetime\",\n                \"cname\":\"\u5e74\u6708\u65e5\",\n                \"description\":\"\u5e74\u6708\u65e5\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"open_d\",\n                \"type\":\"decimal(8,2)\",\n                \"cname\":\"\u958b\u76e4\u50f9(\u5143)\",\n                \"description\":\"\u8208\u6ac3\u80a1\u7968\u4e0d\u63d0\u4f9b\u958b\u76e4\u50f9\uff0c\u672c\u8655\u4e4b\u958b\u76e4\u50f9\u70ba\u524d\u4e00\u4ea4\u6613\u65e5\u4e4b\u6536\u76e4\u50f9\u3002\u9996\u6b21\u4e0a\u8208\u6ac3\u65e5\u7576\u65e5\u958b\u76e4\u50f9\u4ee5[\uff0d]\u503c\u4ee3\u5165\",\n                \"unit\":\"NTD\"\n            },\n            {\n                \"name\":\"high_d\",\n                \"type\":\"decimal(8,2)\",\n                \"cname\":\"\u6700\u9ad8\u50f9(\u5143)\",\n                \"description\":\"\u82e5\u7576\u65e5\u7121\u6210\u4ea4\uff0c\u4ee5\u524d\u4e00\u4ea4\u6613\u65e5\u6536\u76e4\u50f9\u4ee3\u5165\",\n                \"unit\":\"NTD\"\n            },\n            {\n                \"name\":\"low_d\",\n                \"type\":\"decimal(8,2)\",\n                \"cname\":\"\u6700\u4f4e\u50f9(\u5143)\",\n                \"description\":\"\u82e5\u7576\u65e5\u7121\u6210\u4ea4\uff0c\u4ee5\u524d\u4e00\u4ea4\u6613\u65e5\u6536\u76e4\u50f9\u4ee3\u5165\",\n                \"unit\":\"NTD\"\n            },\n            {\n                \"name\":\"close_d\",\n                \"type\":\"decimal(8,2)\",\n                \"cname\":\"\u6536\u76e4\u50f9(\u5143)\",\n                \"description\":\"\u82e5\u7576\u65e5\u7121\u6210\u4ea4\uff0c\u4ee5\u524d\u4e00\u4ea4\u6613\u65e5\u6536\u76e4\u50f9\u4ee3\u5165\",\n                \"unit\":\"NTD\"\n            },\n            {\n                \"name\":\"volume\",\n                \"type\":\"decimal(9,0)\",\n                \"cname\":\"\u6210\u4ea4\u91cf(\u5343\u80a1)\",\n                \"description\":\"\u7576\u65e5\u82e5\u6210\u4ea4\u91cf\u70ba0\uff0c\u8868\u793a\u7576\u65e5\u7121\u4ea4\u6613\uff0c\u6b64\u6642\u4e4b\u958b\u9ad8\u4f4e\u6536\u50f9\u683c\u70ba\u524d\u4e00\u65e5\u4e4b\u6536\u76e4\u50f9\u9664\u52a0\u6b0a\u6307\u6578(Y9999)\u5916\uff0c\u7522\u696d\u90e8\u5206\u7531TEJ\u884d\u751f\uff0c\u70ba\u6210\u5206\u80a1\u6210\u4ea4\u91cf\u4e4b\u52a0\u7e3d\",\n                \"unit\":\"T\"\n            },\n            {\n                \"name\":\"amount\",\n                \"type\":\"decimal(12,0)\",\n                \"cname\":\"\u6210\u4ea4\u503c(\u5343\u5143)\",\n                \"description\":\"\u672a\u7121\u8003\u616e\u516c\u773e\u6d41\u901a\u91cf(free float)\uff1b\u9664\u52a0\u6b0a\u6307\u6578(Y9999)\u5916\uff0c\u7522\u696d\u90e8\u5206\u7531TEJ\u884d\u751f\",\n                \"unit\":\"NTD,T\"\n            },\n            {\n                \"name\":\"roi\",\n                \"type\":\"decimal(9,4)\",\n                \"cname\":\"\u5831\u916c\u7387%\",\n                \"description\":\"\u7576OTC\u8f49\u81f3TSE\u4ea4\u6613\u6642\uff0c\u5831\u916c\u7387\u4ee5\u627f\u92b7\u50f9\u8a08\u7b97\uff0c\u82e5\u7121\u627f\u92b7\u50f9\uff0c\u5247\u4ee5OTC\u6700\u5f8c\u4e00\u5929\u4e4b\u6536\u76e4\u50f9\u4f86\u8a08\u7b97\u3002\",\n                \"unit\":\"%\"\n            },\n            {\n                \"name\":\"turnover\",\n                \"type\":\"decimal(9,4)\",\n                \"cname\":\"\u9031\u8f49\u7387%\",\n                \"description\":\"\u500b\u80a1=\u6210\u4ea4\u91cf/\u6d41\u901a\u80a1\u6578*100(%)\uff1b\u7522\u696d\uff1d\u7522\u696d\u6210\u4ea4\u91cf\u7e3d\u984d/\u7522\u696d\u6d41\u901a\u80a1\u6578*100(%)\",\n                \"unit\":\"%\"\n            },\n            {\n                \"name\":\"outstanding\",\n                \"type\":\"decimal(12,0)\",\n                \"cname\":\"\u6d41\u901a\u5728\u5916\u80a1\u6578(\u5343\u80a1)\",\n                \"description\":\"\u6d41\u901a\u5728\u5916\u80a1\u6578(\u5343\u80a1)\",\n                \"unit\":\"T\"\n            },\n            {\n                \"name\":\"mv\",\n                \"type\":\"decimal(12,0)\",\n                \"cname\":\"\u5e02\u503c(\u767e\u842c\u5143)\",\n                \"description\":\"\u500b\u80a1\uff1a\u6d41\u901a\u5728\u5916\u80a1\u6578(\u500b\u80a1)*\u672a\u8abf\u6574\u6536\u76e4\u50f9\uff1b\u6307\u6578\uff1a\u70ba\u53cd\u6620\u8a72\u80a1\u7968\u65bc\u5e02\u5834\u4e0a\u5be6\u969b\u53ef\u6d41\u901a\u4e4b\u80a1\u6578\uff0c\u6703\u5c07\u5404\u6210\u5206\u80a1\u4e4b\u516c\u958b\u767c\u884c\u80a1\u6578\u6263\u9664\u9577\u671f\u6027\u3001\u7b56\u7565\u6027\u6301  \u80a1\u6bd4\u4f8b\uff0c\u6545\u8a08\u7b97\u6307\u6578\u5e02\u503c\u6642\uff0c\u82e5\u8a72\u6307\u6578\u6709\u8003\u616e\u516c\u773e\u6d41\u901a\u91cf(\u4ea4\u6613\u6240\u8207FTSE\u5408\u7de8\u7684\u6307\u6578)\uff0c\u5247\u5e02\u503c\u516c\u5f0f=\u672a\u8abf\u6574\u6536\u76e4\u50f9*\u6d41\u901a\u5728\u5916\u80a1\u6578(\u500b\u80a1)*\u516c\u773e\u6d41\u901a\u4fc2\u6578(\u6b64\u4fc2\u6578\u7531\u4ea4\u6613\u6240\u63d0\u4f9b)\",\n                \"unit\":\"NTD,T\"\n            },\n            {\n                \"name\":\"bid\",\n                \"type\":\"decimal(7,2)\",\n                \"cname\":\"\u6700\u5f8c\u63ed\u793a\u8cb7\u50f9\",\n                \"description\":\"\u6700\u5f8c\u63ed\u793a\u8cb7\u50f9\",\n                \"unit\":\"NTD\"\n            },\n            {\n                \"name\":\"offer\",\n                \"type\":\"decimal(7,2)\",\n                \"cname\":\"\u6700\u5f8c\u63ed\u793a\u8ce3\u50f9\",\n                \"description\":\"\u6700\u5f8c\u63ed\u793a\u8ce3\u50f9\",\n                \"unit\":\"NTD\"\n            },\n            {\n                \"name\":\"roib\",\n                \"type\":\"decimal(9,4)\",\n                \"cname\":\"\u5831\u916c\u7387-Ln\",\n                \"description\":\"\u5831\u916c\u7387-Ln\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"mv_pct\",\n                \"type\":\"decimal(7,3)\",\n                \"cname\":\"\u5e02\u503c\u6bd4\u91cd%\",\n                \"description\":\"=\u5e02\u503c/\u52a0\u6b0a\u6307\u6578\u6709\u6548\u6210\u5206\u80a1\u7e3d\u5e02\u503c*100(%)(\u7522\u696d\u4e4b\u5e02\u503c\u6bd4\u91cd:\u7522\u696d\u6709\u6548\u6210\u5206\u80a1\u4e4b\u7e3d\u5e02\u503c/\u52a0\u6b0a\u6307\u6578\u6709\u6548\u6210\u5206\u80a1\u7e3d\u5e02\u503c*100(%))\",\n                \"unit\":\"%\"\n            },\n            {\n                \"name\":\"amt_pct\",\n                \"type\":\"decimal(7,3)\",\n                \"cname\":\"\u6210\u4ea4\u503c\u6bd4\u91cd%\",\n                \"description\":\"=\u6210\u4ea4\u503c/\u52a0\u6b0a\u6307\u6578\u6709\u6548\u6210\u5206\u80a1\u7e3d\u6210\u4ea4\u503c*100(%)\",\n                \"unit\":\"%\"\n            },\n            {\n                \"name\":\"trn_d\",\n                \"type\":\"decimal(9,0)\",\n                \"cname\":\"\u6210\u4ea4\u7b46\u6578(\u7b46)\",\n                \"description\":\"\u6210\u4ea4\u7b46\u6578(\u7b46)\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"per_tse\",\n                \"type\":\"decimal(7,2)\",\n                \"cname\":\"\u672c\u76ca\u6bd4-TSE\",\n                \"description\":\"=\u6536\u76e4\u50f9/\u6700\u8fd14\u5b63\u5408\u8a08\u4e4b\u6bcf\u80a1\u6de8\u5229\uff0c\u4ea4\u6613\u6240\u63d0\u4f9b\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"per_tej\",\n                \"type\":\"decimal(7,2)\",\n                \"cname\":\"\u672c\u76ca\u6bd4-TEJ\",\n                \"description\":\"=\u6536\u76e4\u50f9/\u6700\u8fd14\u5b63\u5408\u8a08\u4e4b\u6bcf\u80a1\u5e38\u7e8c\u6027\u6de8\u5229\uff0cTEJ\u63d0\u4f9b\u672c\u6b04\u4f4d\u9700\u642d\u914d\u8ca1\u5831\u767c\u4f48\u6642\u9593\uff0c\u76ee\u524d\u66f4\u65b0\u65b9\u5f0f\u70ba\u6bcf\u5e746/1\u300110/1\u3001\u53ca12/1\u66f4\u65b0\u5e38\u7e8c\u6027\u6de8\u5229\u8cc7\u6599\uff0c\u9996\u6b21\u4e0a\u5e02\u9700\u6eff\u4e00\u5e74\u7684\u6b21\u4e00\u5e74\u5ea61/1\u59cb\u8a08\u7b97\u3002\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"pbr_tse\",\n                \"type\":\"decimal(7,2)\",\n                \"cname\":\"\u80a1\u50f9\u6de8\u503c\u6bd4-TSE\",\n                \"description\":\"=\u6536\u76e4\u50f9/\u6bcf\u80a1\u6de8\u503c\uff0c\u4ea4\u6613\u6240\u63d0\u4f9b(\u4e0d\u542b\u8208\u6ac3)\u3002TSE\u81ea\u6c11\u570b94\u5e749\u67081\u65e5\u958b\u59cb\u63d0\u4f9b\uff0cOTC\u81ea\u6c11\u570b92\u5e748\u6708\u958b\u59cb\u63d0\u4f9b\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"pbr_tej\",\n                \"type\":\"decimal(7,2)\",\n                \"cname\":\"\u80a1\u50f9\u6de8\u503c\u6bd4-TEJ\",\n                \"description\":\"TEJ \u884d\u751f\uff0c\u672c\u6b04\u4f4d\u9700\u642d\u914d\u8ca1\u5831\u767c\u4f48\u6642\u9593\uff0c\u76ee\u524d\u66f4\u65b0\u65b9\u5f0f\u70ba\u6bcf\u5e746/1\u300110/1\u3001\u53ca12/1\u66f4\u65b0\u80a1\u6771\u6b0a\u76ca\u8cc7\u6599\uff0c\u9996\u6b21\u4e0a\u5e02\u9700\u6eff\u4e00\u5e74\u7684\u6b21\u4e00\u5e74\u5ea61/1\u59cb\u8a08\u7b97\u3002\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"limit\",\n                \"type\":\"char(1)\",\n                \"cname\":\"\u6f32\u8dcc\u505c\",\n                \"description\":\"\u80a1\u7968\u6f32\u505c\uff1a\u201d+\u201d\uff1b\u8dcc\u505c\uff1a\u201d-\u201c\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"tej_psr\",\n                \"type\":\"decimal(7,2)\",\n                \"cname\":\"\u80a1\u50f9\u71df\u6536\u6bd4-TEJ\",\n                \"description\":\"=\u5e02\u503c/\u6700\u8fd14\u5b63\u5408\u8a08\u4e4b\u71df\u6536\uff0cTEJ\u63d0\u4f9b\u672c\u6b04\u4f4d\u9700\u642d\u914d\u8ca1\u5831\u767c\u4f48\u6642\u9593\uff0c\u76ee\u524d\u66f4\u65b0\u65b9\u5f0f\u70ba\u6bcf\u5e746/1\u300110/1\u3001\u53ca12/1\u66f4\u65b0\u71df\u6536\u8cc7\u6599\uff0c\u9996\u6b21\u4e0a\u5e02\u9700\u6eff\u4e00\u5e74\u7684\u6b21\u4e00\u5e74\u5ea61/1\u59cb\u8a08\u7b97\u3002\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"div_yid\",\n                \"type\":\"decimal(7,2)\",\n                \"cname\":\"\u80a1\u5229\u6b96\u5229\u7387-TSE\",\n                \"description\":\"\u5373\u6bcf\u80a1\u80a1\u5229\u8207\u7576\u65e5\u540d\u76ee\u6536\u76e4\u50f9\u4e4b\u6bd4\u503c\uff0c\u5176\u4e2d\u6bcf\u80a1\u80a1\u5229=\u8a72\u516c\u53f8\u6bcf\u80a1\u914d\u767c\u4e4b\u73fe\u91d1\u80a1\u5229+\u76c8\u9918\u8f49\u589e\u8cc7\u80a1\u7968\u80a1\u5229\u3002\u6b64\u6b04\u4f4d\u7531\u4ea4\u6613\u6240\u63d0\u4f9b\uff0c\u5176\u4e2d97/07/17\u4ee5\u524d\u4e4b\u8cc7\u6599\u4ea4\u6613\u6240\u8a08\u7b97\u65b9\u5f0f\u4fc2\u63a1\u53d6\u524d\u4e00\u7b46\u6709\u767c\u653e\u80a1\u5229\u4e4b\u8cc7\u6599\u4f86\u8a08\u7b97\uff0c\u5373\u7576\u5e74\u5ea6\u516c\u53f8\u4e0d\u767c\u653e\u80a1\u5229\uff0c\u5247\u4ee5\u524d\u4e00\u5e74\u5ea6\u6216\u66f4\u65e9\u4ee5\u524d\u7684\u80a1\u5229\u8cc7\u6599\u8a08\u7b97\u4e0d\u5408\u7406\uff0c\u654597/07/17\u4ea4\u6613\u6240\u5df2\u4fee\u6b63\u70ba\u4ee5\u8a72\u5e74\u5ea6\u4e4b\u8cc7\u6599\u4f86\u8a08\u7b97\uff0c\u6545\u524d\u5f8c\u671f\u8cc7\u6599\u6703\u6709\u6240\u5dee\u7570\u3002\",\n                \"unit\":\"%\"\n            },\n            {\n                \"name\":\"tej_cdiv\",\n                \"type\":\"decimal(7,2)\",\n                \"cname\":\"\u73fe\u91d1\u80a1\u5229\u7387\",\n                \"description\":\"=\u73fe\u91d1\u80a1\u5229\u7e3d\u984d/\u5e02\u503c*100%\uff0cTEJ\u63d0\u4f9b\",\n                \"unit\":\"%\"\n            },\n            {\n                \"name\":\"clschg\",\n                \"type\":\"decimal(8,2)\",\n                \"cname\":\"\u80a1\u50f9\u6f32\u8dcc(\u5143)\",\n                \"description\":\"\u80a1\u50f9\u6f32\u8dcc(\u5143)\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"xattn1\",\n                \"type\":\"char(1)\",\n                \"cname\":\"\u6ce8\u610f\u80a1\u7968(A)\",\n                \"description\":\"\u516c\u4f48\u7570\u5e38\u4ea4\u6613\u6709\u50f9\u8b49\u5238\u4e4b\u4ea4\u6613\u8cc7\u8a0a\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"xattn2\",\n                \"type\":\"char(1)\",\n                \"cname\":\"\u8655\u7f6e\u80a1\u7968(D)\",\n                \"description\":\"\u5c0d\u9023\u7e8c\u516c\u4f48\u6ce8\u610f\u4ea4\u6613\u8cc7\u8a0a\u4e4b\u6709\u50f9\u8b49\u5238\u63a1\u53d6\u4e4b\u8655\u7f6e\u63aa\u65bd\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"xstat1\",\n                \"type\":\"char(1)\",\n                \"cname\":\"\u5168\u984d\u4ea4\u5272(Y)\",\n                \"description\":\"\u5168\u984d\u4ea4\u5272(Y)\",\n                \"unit\":\"-\"\n            },\n            {\n                \"name\":\"pmkt\",\n                \"type\":\"char(5)\",\n                \"cname\":\"\u5e02\u5834\u5225\",\n                \"description\":\"\u5e02\u5834\u5225\",\n                \"unit\":\"-\"\n            }\n        ]\n    }\n}\n</code></pre> </p>"},{"location":"tutorial/restapi/#search-tables","title":"Search Tables","text":"<p>The following documentation explains how to search for tables using keywords.</p>"},{"location":"tutorial/restapi/#usage_2","title":"Usage","text":"<p>in</p> <pre><code>GET https://api.tej.com.tw/api/search/table/{\u95dc\u9375\u5b57}?api_key=&lt;YOURAPIKEY&gt;\n</code></pre> <p>The response is an array representing multiple results. Each item contains the following information:</p> Parameter Description <code>matchType</code> Match type<ul><li><code>TABLE_MATCH</code>: Keyword is found in the table name or description</li><li><code>COLUMN_MATCH</code>: Keyword is found in the column name or description</li><li><code>TABLE_MATCH &amp; COLUMN_MATCH</code>: Keyword is found in both the table and column names or descriptions</li></ul> <code>tableId</code> Table ID <code>tableName</code> Table name <code>tableDesc</code> Table description <code>columns</code> Table column informationParameterDescription<code>name</code>Column code<code>cname</code>Column name (Chinese)<code>description</code>Column description<code>type</code>Data type<code>unit</code>Unit"},{"location":"tutorial/restapi/#example_1","title":"Example","text":"<p>Search \u5e02\u76c8\u7387</p> <pre><code>GET https://api.tej.com.tw/api/search/table/\u5e02\u76c8\u7387?api_key=&lt;API_KEY&gt;\n</code></pre> out <p><pre><code>{\n    \"result\":{\n        \"tables\":[\n            {\n                \"matchType\":\"COLUMN_MATCH\",\n                \"tableId\":\"CHN/CPRCD\",\n                \"tableName\":\"\u4e2d\u570b_\u65e5\u80a1\u50f9_\u672a\u8abf\u6574\",\n                \"tableDesc\":\"\u3010\u8cc7\u6599\u7bc4\u570d\u3011\u4e0a\u6d77\u53ca\u6df1\u5733\u4ea4\u6613\u6240\u4e0a\u5e02\u516c\u53f8\uff08\u5305\u542bA\u80a1\u53caB\u80a1\uff09\u3010\u8cc7\u6599\u671f\u9593\u30111991\u5e74\u8d77\u3010\u8cc7\u6599\u983b\u7387\u3011\u65e5\u8cc7\u6599\uff08\u884d\u751f\u9031\u3001\u6708\u3001\u5e74\u8cc7\u6599\uff09\u3010\u8cc7\u6599\u4f86\u6e90\u3011\u4e0a\u6d77\u53ca\u6df1\u5733\u4ea4\u6613\u6240\",\n                \"columns\":[\n                {\n                    \"name\":\"per_tej\",\n                    \"type\":\"decimal(7,2)\",\n                    \"cname\":\"\u5e02\u76c8\u7387-TEJ\",\n                    \"description\":\"=(\u7576\u65e5\u672a\u8abf\u6574\u6536\u76e4\u50f9*\u516c\u53f8\u7e3d\u80a1\u6578) / \u80a1\u6771\u6b0a\u76ca\u7e3d\u984d\u3002\u672c\u6b04\u4f4d\u9700\u642d\u914d\u8ca1\u5831\u767c\u4f48\u6642\u9593\uff0c\u76ee\u524d\u66f4\u65b0\u65b9\u5f0f\u70ba\u6bcf\u5e745\u30019\u300111\u6708\u7b2c\u4e00\u500b\u4ea4\u6613\u65e5\u80a1\u6771\u6b0a\u76ca\u8cc7\u6599\",\n                    \"unit\":\"-\"\n                }\n                ]\n            },\n            {\n                \"matchType\":\"COLUMN_MATCH\",\n                \"tableId\":\"CHN/CPRCD1\",\n                \"tableName\":\"\u4e2d\u570b_\u65e5\u80a1\u50f9_\u9664\u6b0a\u606f\u8abf\u6574\",\n                \"tableDesc\":\"\u3010\u8cc7\u6599\u7bc4\u570d\u3011\u4e0a\u6d77\u53ca\u6df1\u5733\u4ea4\u6613\u6240\u4e0a\u5e02\u516c\u53f8\uff08\u5305\u542bA\u80a1\u53caB\u80a1\uff09\u3010\u8cc7\u6599\u671f\u9593\u30111991\u5e74\u8d77\u3010\u8cc7\u6599\u983b\u7387\u3011\u65e5\u8cc7\u6599\uff08\u884d\u751f\u9031\u3001\u6708\u3001\u5e74\u8cc7\u6599\uff09\u3010\u8cc7\u6599\u4f86\u6e90\u3011\u4e0a\u6d77\u53ca\u6df1\u5733\u4ea4\u6613\u6240\",\n                \"columns\":[\n                {\n                    \"name\":\"per_tej\",\n                    \"type\":\"decimal(7,2)\",\n                    \"cname\":\"\u5e02\u76c8\u7387-TEJ\",\n                    \"description\":\"=(\u7576\u65e5\u672a\u8abf\u6574\u6536\u76e4\u50f9*\u516c\u53f8\u7e3d\u80a1\u6578) / \u80a1\u6771\u6b0a\u76ca\u7e3d\u984d\u3002\u672c\u6b04\u4f4d\u9700\u642d\u914d\u8ca1\u5831\u767c\u4f48\u6642\u9593\uff0c\u76ee\u524d\u66f4\u65b0\u65b9\u5f0f\u70ba\u6bcf\u5e745\u30019\u300111\u6708\u7b2c\u4e00\u500b\u4ea4\u6613\u65e5\u80a1\u6771\u6b0a\u76ca\u8cc7\u6599\",\n                    \"unit\":\"-\"\n                }\n                ]\n            }\n        ]\n    }\n}\n</code></pre> </p>"},{"location":"tutorial/restapi/#apikey-information","title":"APIKEY Information","text":"<p>The following documentation explains how to obtain the API key information.</p>"},{"location":"tutorial/restapi/#usage_3","title":"Usage","text":"<p>in</p> <pre><code>GET https://api.tej.com.tw/api/apiKeyInfo/&lt;YOURAPIKEY&gt;\n</code></pre> <p>Response Information Description</p> Parameter Description <code>key</code> Your API key <code>startDate</code> API key activation date <code>endDate</code> API key expiration date <code>reqDayLimit</code> Daily request limit <code>rowsDayLimit</code> Daily row limit <code>rowsMonthLimit</code> Monthly row limit <code>todayReqCount</code> Requests made today  ` <code>todayRows</code> Rows used today <code>monthRows</code> Rows used this month <code>user</code> User informationParameterDescription<code>userId</code>User ID<code>name</code>User name<code>shortName</code>User short name<code>subscriptionStartDate</code>Subscription start date<code>subscriptionEndDate</code>Subscription end date<code>tables</code>List of accessible tables"},{"location":"tutorial/restapi/#example_2","title":"Example","text":"<p>Example</p> <pre><code>GET https://api.tej.com.tw/api/apiKeyInfo/\"YOURAPIKEY\"\n</code></pre> out <p><pre><code>{\n    \"key\":\"&lt;YOURAPIKEY&gt;\",\n    \"user\":{\n        \"userId\":1,\n        \"shortName\":\"\u6e2c\u8a66\u5e33\u865f\",\n        \"name\":\"\u6e2c\u8a66\u5e33\u865f\",\n        \"subscritionStartDate\":\"2018-08-20\",\n        \"subscritionEndDate\":\"2022-08-31\",\n        \"maxKey\":1,\n        \"tables\":{\n            \"TWN/AGIN\":{\n                \"tableId\":\"TWN/AGIN\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"CHN/CFDATT\":{\n                \"tableId\":\"CHN/CFDATT\",\n                \"startUsageDate\":\"2018-12-10\",\n                \"endUsageDate\":\"2018-12-25\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/ACINV\":{\n                \"tableId\":\"TWN/ACINV\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"CHN/CRMBFX\":{\n                \"tableId\":\"CHN/CRMBFX\",\n                \"startUsageDate\":\"2018-12-10\",\n                \"endUsageDate\":\"2018-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/ALANDTR\":{\n                \"tableId\":\"TWN/ALANDTR\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/ASTK1\":{\n                \"tableId\":\"TWN/ASTK1\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/APRCD\":{\n                \"tableId\":\"TWN/APRCD\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"CHN/CFDNAV\":{\n                \"tableId\":\"CHN/CFDNAV\",\n                \"startUsageDate\":\"2018-12-10\",\n                \"endUsageDate\":\"2018-12-25\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/AMIX\":{\n                \"tableId\":\"TWN/AMIX\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/AOPTION\":{\n                \"tableId\":\"TWN/AOPTION\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/ATINST1\":{\n                \"tableId\":\"TWN/ATINST1\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/AARNT\":{\n                \"tableId\":\"TWN/AARNT\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/AQFII\":{\n                \"tableId\":\"TWN/AQFII\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/AFUTR\":{\n                \"tableId\":\"TWN/AFUTR\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/ANAV\":{\n                \"tableId\":\"TWN/ANAV\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/AATT\":{\n                \"tableId\":\"TWN/AATT\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/ASALE\":{\n                \"tableId\":\"TWN/ASALE\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/AIND\":{\n                \"tableId\":\"TWN/AIND\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/AOFATT\":{\n                \"tableId\":\"TWN/AOFATT\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"GLOBAL/ANMAR\":{\n                \"tableId\":\"GLOBAL/ANMAR\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2019,\n                \"dataEndYear\":2020\n            },\n            \"TWN/ABSTN\":{\n                \"tableId\":\"TWN/ABSTN\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/AOFNAV\":{\n                \"tableId\":\"TWN/AOFNAV\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/AAPRTRAN\":{\n                \"tableId\":\"TWN/AAPRTRAN\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"GLOBAL/ABMAR\":{\n                \"tableId\":\"GLOBAL/ABMAR\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2019,\n                \"dataEndYear\":2020\n            },\n            \"TWN/AINV\":{\n                \"tableId\":\"TWN/AINV\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            },\n            \"TWN/AAPRRENT\":{\n                \"tableId\":\"TWN/AAPRRENT\",\n                \"startUsageDate\":\"2018-08-01\",\n                \"endUsageDate\":\"2019-12-31\",\n                \"dataStartYear\":2008,\n                \"dataEndYear\":2999\n            }\n        },\n        \"emp\":false\n    },\n    \"startDate\":\"2018-11-12\",\n    \"endDate\":\"2018-11-30\",\n    \"todayRows\":0,\n    \"monthRows\":0,\n    \"todayReqCount\":0,\n    \"rowsDayLimit\":10000000,\n    \"rowsMonthLimit\":9223372036854776000,\n    \"reqDayLimit\":100000,\n    \"varEnabled\":false,\n    \"varMaxAssets\":500,\n    \"varConcurrent\":1,\n    \"varAllowAssetTypes\":[\n\n    ],\n    \"varAdvanced\":false\n}\n</code></pre> </p>"},{"location":"tutorial/tej_api_python_en/","title":"Python Documentation","text":"<p>The following documentation explains how to use the TEJ Python API to access the TEJ database.</p>"},{"location":"tutorial/tej_api_python_en/#installation","title":"Installation","text":"<p>Simply install <code>tejapi</code> using pip.</p> <p>Install the Python package</p> <pre><code>pip install tejapi \n</code></pre>"},{"location":"tutorial/tej_api_python_en/#authentication","title":"Authentication","text":"<p>After installation, include the following lines at the beginning of your script</p> <p>Authentication</p> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"    \n</code></pre>"},{"location":"tutorial/tej_api_python_en/#global-parameters","title":"Global Parameters","text":"<p>Use the <code>tejapi.ApiConfig.ignoretz</code> parameter to determine whether datetime fields should include timezone information (default is <code>False</code>, meaning timezone is shown). Set it to <code>True</code> to ignore timezones.</p> <p>Global Parameters</p> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"\ntejapi.ApiConfig.ignoretz = True    \n</code></pre>"},{"location":"tutorial/tej_api_python_en/#retrieve-usage-information","title":"Retrieve Usage Information","text":"<p>Use <code>tejapi.ApiConfig.info()</code> to retrieve various usage details.</p> <p>tejapi.ApiConfig.info()</p> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"\ninfo = tejapi.ApiConfig.info() \n</code></pre> <p>Response Information Description</p> Parameter Description <code>key</code> Your API key <code>startDate</code> API key activation date <code>endDate</code> API key expiration date <code>reqDayLimit</code> Daily request limit <code>rowsDayLimit</code> Daily row limit <code>rowsMonthLimit</code> Monthly row limit <code>todayReqCount</code> Requests made today  ` <code>todayRows</code> Rows used today <code>monthRows</code> Rows used this month <code>user</code> User informationParameterDescription<code>userId</code>User ID<code>name</code>User name<code>shortName</code>User short name<code>subscriptionStartDate</code>Subscription start date<code>subscriptionEndDate</code>Subscription end date<code>tables</code>List of accessible tables"},{"location":"tutorial/tej_api_python_en/#data-query","title":"Data Query","text":"<p>The following section explains how to use the TEJ Python API to query data.</p>"},{"location":"tutorial/tej_api_python_en/#usage","title":"Usage","text":"<p>Take the unadjusted stock price (daily) for listed (OTC) companies, <code>TWN/APRCD</code>, as an example.  You can directly use the <code>tejapi.get()</code> method to retrieve the data, as shown in the example below.</p> <p>API Data Retrieval Example for Stock Prices(TWN/APRCD)</p> <pre><code>data = tejapi.get('TWN/APRCD')\n</code></pre> <p>Tip</p> <p>If no filter conditions are provided, all data will be retrieved.  It is recommended to apply appropriate filters as explained below.</p>"},{"location":"tutorial/tej_api_python_en/#data-filtering","title":"Data Filtering","text":"<p>If you need to filter by fields (e.g., only retrieve the Taiwan Weighted Index (Y9999)), simply add a filter condition such as <code>coid='Y9999'</code>:</p> <p>Single Column Filtering</p> <pre><code>data = tejapi.get('TWN/APRCD',coid='Y9999')\n</code></pre> <p>To retrieve two indices, <code>Y9999 and Y9998</code>, use a sequence condition:</p> <p>Multiple Value Selection</p> <pre><code>data = tejapi.get('TWN/APRCD',coid=['Y9999','Y9998'])\n</code></pre> <p>The system limits a single request to a maximum of 10,000 records. You may use <code>paginate=TRUE</code> to automatically fetch data in multiple batches:</p> <p>Pagination for Large Data Sets</p> <pre><code>data = tejapi.get('TWN/APRCD',coid='Y9999', paginate=True)\n</code></pre> <p>Tip</p> <p>The system limits each request to a maximum of 10,000 records. You can use the paginate=TRUE parameter to retrieve data in batches, but the total number of records is capped at 1,000,000. Please use appropriate filters to reduce data volume.</p> <p>Filtering across multiple columns is supported.</p> <p>Multiple Column Filtering Syntax</p> <pre><code>data = tejapi.get('TWN/APRCD',coid='Y9999', mdate='2018-01-20'\n,paginate=True)\n</code></pre>"},{"location":"tutorial/tej_api_python_en/#column-filtering","title":"Column Filtering","text":"<p>To retrieve only a single column, use the <code>columns</code> parameter in <code>opts</code>. For example, to retrieve just the opening price <code>(open_d)</code>:</p> <p>Retrieve the opening price column (open_d)</p> <pre><code>data = tejapi.get('TWN/APRCD',opts={'columns':'open_d'}) \n</code></pre> <p>For multiple columns (e.g., <code>mdate</code>, <code>open_d</code>):</p> <p>[ ' mdate ' , ' open_d ' ]</p> <pre><code>data = tejapi.get('TWN/APRCD',opts={'columns':['mdate','open_d']})\n</code></pre>"},{"location":"tutorial/tej_api_python_en/#data-filtering-operations","title":"Data Filtering Operations","text":"<p>You can filter data by value ranges. </p> <p>For example, to retrieve data with a trade date after <code>2018-01-01</code>:</p> <p>Retrieving data where the transaction date is greater than 2018-01-01</p> <pre><code>data = tejapi.get('TWN/APRCD',coid='Y9999', mdate={'gt':'2018-01-01'},\npaginate=True)\n</code></pre> <p>To retrieve data with a trade date between <code>2018-01-01 and 2018-02-01</code>:</p> <p>Retrieving data where the transaction date is greater than 2018-01-01 and less than 2018-02-01</p> <pre><code>data = tejapi.get('TWN/APRCD',coid='Y9999',\nmdate={'gt':'2018-01-01','lt':'2018-02-01'}, paginate=True)\n</code></pre> Filter Operator Description Example <code>=</code> The field is equal to the specified value or string <code>coid='Y9999'</code> <code>gt</code> The field is greater than the specified value <code>mdate={'gt': '2018-01-01'}</code> <code>lt</code> The field is less than the specified value <code>mdate={'lt': '2018-01-01'}</code> <code>gte</code> The field is greater than or equal to the specified value <code>mdate={'gte': '2018-01-01'}</code> <code>lte</code> The field is less than or equal to the specified value <code>mdate={'lte': '2018-01-01'}</code> <code>ne</code> The field is not equal to the specified value <code>mdate={'ne': '2018-01-01'}</code>"},{"location":"tutorial/tej_api_python_en/#query-parameters","title":"Query Parameters","text":"Parameter Required Description Example <code>columns</code> No Specify the fields to retrieve. Use commas to separate multiple field names. <code>opts={'columns': ['coid', 'mdate', 'val']}</code> <code>per_page</code> No Number of records to retrieve per request (maximum is 10,000). Total records must not exceed 1,000,000. <code>opts={'per_page': 100}</code> <code>sort</code> No Specify the sorting field and order using the format [field].[order]. Sorting order can be ascending (asc) or descending (desc). Default is ascending. <code>opts={'sort': 'mdate.desc'}</code> <code>pivot</code> No Pivot table feature, transforms values into columns. Currently only supported for financial-related tables. <code>opts={'pivot': True}</code>"},{"location":"tutorial/tej_api_python_en/#other-parameters","title":"Other Parameters","text":"Parameter Required Description Example <code>chinese_column_name</code> No Display column names in Chinese. <code>chinese_column_name=True</code>"},{"location":"tutorial/tej_api_python_en/#table-information","title":"Table Information","text":"<p>The following documentation explains how to retrieve table metadata.</p>"},{"location":"tutorial/tej_api_python_en/#usage_1","title":"Usage","text":"<p>TWN/APRCD</p> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"\ntable_info = tejapi.table_info('TWN/APRCD')\n</code></pre> <p>Response Information Description</p> Parameter Description <code>dbCode</code> Database code <code>tableCode</code> Table code <code>name</code> Table name <code>description</code> Table description <code>primaryKey</code> List of primary keys in the table <code>filters</code> Available filter fields for the table <code>columns</code> Table column detailsParameterDescription<code>name</code>Column code<code>cname</code>Column name (Chinese)<code>description</code>Column description<code>type</code>Data type<code>unit</code>Unit <code>pivot</code> Whether pivoting is supported <code>status</code> Table statusParameterDescription<code>status</code>Status<code>refreshed_at</code>Latest Data Format Modification Time"},{"location":"tutorial/tej_api_python_en/#search-tables","title":"Search Tables","text":"<p>The following documentation explains how to search for tables using keywords.</p>"},{"location":"tutorial/tej_api_python_en/#usage_2","title":"Usage","text":"<p>tejapi.search_table</p> <pre><code>import tejapi\ntejapi.ApiConfig.api_key = \"YOURAPIKEY\"\nsearch = tejapi.search_table(\"keyword\")\n</code></pre> <p>The response is an array representing multiple results.Each item contains the following information:</p> Parameter Description <code>matchType</code> Match type<ul><li><code>TABLE_MATCH</code>: Keyword is found in the table name or description</li><li><code>COLUMN_MATCH</code>: Keyword is found in the column name or description</li><li><code>TABLE_MATCH &amp; COLUMN_MATCH</code>: Keyword is found in both the table and column names or descriptions</li></ul> <code>tableId</code> Table ID <code>tableName</code> Table name <code>tableDesc</code> Table description <code>columns</code> Table column informationParameterDescription<code>name</code>Column code<code>cname</code>Column name (Chinese)<code>description</code>Column description<code>type</code>Data type<code>unit</code>Unit"}]}